<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>笔记 on SK&#39;s Nikkichou</title>
    <link>https://szkm330.github.io/categories/%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 笔记 on SK&#39;s Nikkichou</description>
    <image>
      <title>SK&#39;s Nikkichou</title>
      <url>https://szkm330.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://szkm330.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 04 Feb 2024 01:50:49 +0900</lastBuildDate><atom:link href="https://szkm330.github.io/categories/%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基本情报刷题记录</title>
      <link>https://szkm330.github.io/posts/%E5%9F%BA%E6%9C%AC%E6%83%85%E6%8A%A5%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Sun, 04 Feb 2024 01:50:49 +0900</pubDate>
      
      <guid>https://szkm330.github.io/posts/%E5%9F%BA%E6%9C%AC%E6%83%85%E6%8A%A5%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</guid>
      <description>テクノロジ系 基礎理論 音频压缩计算
例题，周波数10kHz，ビット数16ビットで4秒間サンプリング，圧縮率1／4のADPCMを用いて圧縮した場合，データ量は20kバイト $$ 16bit \rightarrow 2byte\\ 10k \times2 \times4 \times \frac{1}{4} = 20k $$
アナログ信号 → デジタル信号：標本化（在一定时间间隔下进行测定）→量子化（将数值近似为整数）→符号化（整数转为2进制）
送信誤り検出方式
CRC方式(Cyclic Redundancy Check)： 巡回冗長検査，使用「生成多項式」进行检查 ハミング符号方式： 使用「検査ビット」 パリティチェック方式： 使用「パリティビット」，有垂直和水平两种方向 コンピュータ構成要素 CPU書き込む方式
ライトスルー(write through)，同时写入cache和主存。可保持一贯性，但速度慢 ライトバック(write back)，只写cache，丢掉时才写进主存。更复杂，但快 割込み(Interrupt)：暂停当前进程，优先处理
内部割込み: 原因为执行中的程序（プログラム割込み，SVC割込み, ページフォールト） 外部割り込み:（タイマ割込み，コンソール割込み，入出力割込み，機械チェック割込み） MIPS(million instructions per second) CPU性能指标，1秒能执行 “x百万” 个命令
システム構成要素 予備系システム
ホットスタンバイ（即時復旧・高速復旧），一直在旁边一起同步热身，直接切换 ウォームスタンバイ（中間的復旧），开机待机了，但没有开系统 コールドスタンバイ（段階的復旧），只准备了场所，到时候搬器材过去重开 RAID：复数的HDD作为一个来使用
RAID 0 （ストライピング） 分散写入多个硬盘，并列处理，高速化 RAID 1 （ミラーリング） 每个硬盘写入同样的data，信赖性提升，但效率下降 RAID 2 （基础：0） 读写单位bit，用ハミング符号订正 RAID 3 读写单位bit/byte，用パリティビット订正 RAID 4 （和3类似） 读写单位block RAID 5 读写单位block，パリティ（连订正用的也分散装了） システムの処理能力向上方法</description>
    </item>
    
    <item>
      <title>面试算法抱佛脚-栈/堆/哈希</title>
      <link>https://szkm330.github.io/posts/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E6%8A%B1%E4%BD%9B%E8%84%9A-%E6%A0%88%E5%A0%86%E5%93%88%E5%B8%8C/</link>
      <pubDate>Thu, 01 Feb 2024 08:37:20 +0900</pubDate>
      
      <guid>https://szkm330.github.io/posts/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E6%8A%B1%E4%BD%9B%E8%84%9A-%E6%A0%88%E5%A0%86%E5%93%88%E5%B8%8C/</guid>
      <description>stack stack = [ ]，进栈.append(data)，出栈.pop()，取顶stack[-1]
# 括号匹配问题，注意if的顺序的范围，及时return for char in string: if char in {&amp;#39;(&amp;#39;, &amp;#39;[&amp;#39;, &amp;#39;{&amp;#39;}: stack.push(char) elif char in {&amp;#39;)&amp;#39;, &amp;#39;]&amp;#39;, &amp;#39;}&amp;#39;} and len(stack.stack) &amp;gt; 0: if stack.gettop() == check_dict[char]: stack.pop() else: return False if len(stack.stack) == 0: return True else: return False heap 一般用于堆排序，优先队列。对于最小堆，每个点都小于或等于其子节点。
# 创建最小堆 heapq.heapify(list) # 如果堆的大小小于k，直接添加元素 # 否则，如果新元素大于堆顶元素，先弹出堆顶，再添加新元素 # 这样可以确保堆中始终是最大的k个元素 if len(self.heap) &amp;lt; self.k: heapq.heappush(self.heap, val) elif val &amp;gt; self.heap[0]: heapq.heappushpop(self.heap, val) # 堆顶元素是第k大的元素 return self.</description>
    </item>
    
    <item>
      <title>面试算法抱佛脚-LinkedList</title>
      <link>https://szkm330.github.io/posts/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E6%8A%B1%E4%BD%9B%E8%84%9A-linkedlist/</link>
      <pubDate>Thu, 01 Feb 2024 01:09:01 +0900</pubDate>
      
      <guid>https://szkm330.github.io/posts/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E6%8A%B1%E4%BD%9B%E8%84%9A-linkedlist/</guid>
      <description>重度拖延症开始准备coding test了，也不知道到底需要多少。
如果不报line，应该easy就行了吧？
快慢指针 (环问题) 指fast一定能追上slow，通常设fast步长为2，slow为1
class Solution: def hasCycle(self, head: ListNode) -&amp;gt; bool: # 空链表或链表只有一个节点，无环 if not head or head.next == None: return False # 初始化快慢指针 fast = slow = head # 如果不存在环，肯定 fast 先指向 null # 细节：fast 每次走 2 步，所以要确定 fast 和 fast.next 不为空，不然会报执行出错。 while fast and fast.next: # 快指针移动 2 步，慢指针移动 1 步 fast = fast.next.next slow = slow.next # 快慢指针相遇，有环 if fast == slow: return True return False 两帧相遇在环的中途，（设：head到环起点为x，到环中途为y，绕回环起点为z）</description>
    </item>
    
    <item>
      <title>利用git actions进行博客上传</title>
      <link>https://szkm330.github.io/posts/%E5%88%A9%E7%94%A8git-actions%E8%BF%9B%E8%A1%8C%E5%8D%9A%E5%AE%A2%E4%B8%8A%E4%BC%A0/</link>
      <pubDate>Fri, 17 Nov 2023 02:57:32 +0900</pubDate>
      
      <guid>https://szkm330.github.io/posts/%E5%88%A9%E7%94%A8git-actions%E8%BF%9B%E8%A1%8C%E5%8D%9A%E5%AE%A2%E4%B8%8A%E4%BC%A0/</guid>
      <description>建库，设key 一个公共放网页，username.github.io 一个私有放全部，blog Setting - Developer setting - Personal access tokens， 创建一个 Token，选repo和workflow权限（只能看一次，记得复制） 私有库的 Settings - Secrets - Actions 添加PERSONAL_TOKEN 设置 创建blog/.github/workflows/build.yml
name: github pages on: push: branches: - main # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: &amp;#39;latest&amp;#39; extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.</description>
    </item>
    
    <item>
      <title>git与github</title>
      <link>https://szkm330.github.io/posts/git%E4%B8%8Egithub/</link>
      <pubDate>Mon, 23 Sep 2019 14:35:45 +0900</pubDate>
      
      <guid>https://szkm330.github.io/posts/git%E4%B8%8Egithub/</guid>
      <description># 生成 ssh-keygen -t ed25519 -C “email@outlook.com” # 设置 git config --global user.name &amp;quot;user&amp;quot; git config --global user.email &amp;quot;email@outlook.com&amp;quot; git config --global init.defaultBranch main # 在文件夹下 git init # 初始化仓库 git add . # 添加该路径下所有文件 git commit -m &amp;quot;first commit&amp;quot; # 提交，m后是备注 git remote add origin https://github.com/szkm330/demo.git # 连接，仓库名origin git remote rm origin # 删除连接 git remote -v # 查看 git branch -M main # 换名 git branch -a # 查看 git push -u origin main # 上传 git pull origin main 官网摘录</description>
    </item>
    
    <item>
      <title>V2ray绚烂装订版</title>
      <link>https://szkm330.github.io/posts/v2ray%E7%BB%9A%E7%83%82%E8%A3%85%E8%AE%A2%E7%89%88/</link>
      <pubDate>Tue, 04 Jun 2019 21:37:53 +0900</pubDate>
      
      <guid>https://szkm330.github.io/posts/v2ray%E7%BB%9A%E7%83%82%E8%A3%85%E8%AE%A2%E7%89%88/</guid>
      <description>又研究了一下ws+tls，其实我也不知道有没有搞出来，也不知道到底效果如何，姑且搞一下&amp;hellip;
基本安装 # 刷新源及更新软件 sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade # 脚本安装 bash &amp;lt;(curl -L -s https://install.direct/go.sh) # 编辑 V2Ray 配置 vim /etc/v2ray/config.json bbr wget –no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh chmod +x bbr.sh ./bbr.sh 域名操作 注册域名，A 记录指向自己
生成证书，使用 acme.sh 脚本生成
curl https://get.acme.sh | sh # 安装到 ~/.acme.sh 目录下 source ~/.bashrc # 确保脚本所设置的命令别名生效 运行脚本所需工具
sudo apt-get install socat 如果安装报错，那么可能是因为系统缺少 acme.sh 所需要的依赖项sudo apt-get -y install netcat 开始生成证书，注意改成自己的域名
sudo ~/.acme.sh/acme.sh --issue -d mydomain.me --standalone -k ec-256 脚本每隔60天会自动更新，然后手动更新：</description>
    </item>
    
    <item>
      <title>v2ray自用流程</title>
      <link>https://szkm330.github.io/posts/v2ray%E8%87%AA%E7%94%A8%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Mon, 03 Jun 2019 17:55:00 +0900</pubDate>
      
      <guid>https://szkm330.github.io/posts/v2ray%E8%87%AA%E7%94%A8%E6%B5%81%E7%A8%8B/</guid>
      <description>用的是Ubuntu16.04，主要流程如下：
# 刷新源及更新软件 sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade # 安装 curl sudo apt install curl 如果不是 root 环境需要进入 sudo su 接着就可以安装 Project V(V2Ray) 了 --以上：不知道是不是必须，姑且做一下-- bash &amp;lt;(curl -L -s https://install.direct/go.sh) # 上列命令会自动安装 V2Ray，然后执行下面命令运行 systemctl start v2ray 记下端口号和id　vim /etc/v2ray/config.json进行修改和查看 systemctl start|restart|stop|status v2ray其余控制 https://www.uuidgenerator.net/ 可以生成ID
客户端相关 下载v2ray-windows-64.zip（然后直接编辑config似乎就可以了） 不过可以继续下载v2rayN.zip解压至同一个路径下 接着把相应信息填进去，大概就可以了
若要升级，直接再运行一次安装脚本</description>
    </item>
    
    <item>
      <title>Proxifier设置总结</title>
      <link>https://szkm330.github.io/posts/proxifier%E8%AE%BE%E7%BD%AE%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 30 Mar 2019 14:20:21 +0900</pubDate>
      
      <guid>https://szkm330.github.io/posts/proxifier%E8%AE%BE%E7%BD%AE%E6%80%BB%E7%BB%93/</guid>
      <description>刚好看到有人提起proxifier，就顺便下载来设置了一下，发现下载器连接的问题也随之解决了，可喜可贺。 以下记录简要步骤。
proxy servers 127.0.0.1 1080 socks5 检查check 确定 此时默认全部走全局
rules编辑 添加规则，选择Shadowsocks.exe为直连direct （允许发送到代理服务器的数据包通过，防止循环代理错误） 还可以再添加rule，如把QQ.exe设置为direct
Name Resolution Resolve hostnames through proxy 防止DNS污染</description>
    </item>
    
  </channel>
</rss>
