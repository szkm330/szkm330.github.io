<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Code on SK&#39;s Nikkichou</title>
    <link>https://www.tinclouds.com/tags/code/</link>
    <description>Recent content in Code on SK&#39;s Nikkichou</description>
    <image>
      <title>SK&#39;s Nikkichou</title>
      <url>https://www.tinclouds.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://www.tinclouds.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 01 Feb 2024 08:37:20 +0900</lastBuildDate><atom:link href="https://www.tinclouds.com/tags/code/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>面试算法抱佛脚-栈/堆/哈希</title>
      <link>https://www.tinclouds.com/posts/306fd6ea/</link>
      <pubDate>Thu, 01 Feb 2024 08:37:20 +0900</pubDate>
      
      <guid>https://www.tinclouds.com/posts/306fd6ea/</guid>
      <description>stack stack = [ ]，进栈.append(data)，出栈.pop()，取顶stack[-1]
# 括号匹配问题，注意if的顺序的范围，及时return for char in string: if char in {&amp;#39;(&amp;#39;, &amp;#39;[&amp;#39;, &amp;#39;{&amp;#39;}: stack.push(char) elif char in {&amp;#39;)&amp;#39;, &amp;#39;]&amp;#39;, &amp;#39;}&amp;#39;} and len(stack.stack) &amp;gt; 0: if stack.gettop() == check_dict[char]: stack.pop() else: return False if len(stack.stack) == 0: return True else: return False heap 一般用于堆排序，优先队列。对于最小堆，每个点都小于或等于其子节点。
# 创建最小堆 heapq.heapify(list) # 如果堆的大小小于k，直接添加元素 # 否则，如果新元素大于堆顶元素，先弹出堆顶，再添加新元素 # 这样可以确保堆中始终是最大的k个元素 if len(self.heap) &amp;lt; self.k: heapq.heappush(self.heap, val) elif val &amp;gt; self.heap[0]: heapq.heappushpop(self.heap, val) # 堆顶元素是第k大的元素 return self.</description>
    </item>
    
    <item>
      <title>面试算法抱佛脚-LinkedList</title>
      <link>https://www.tinclouds.com/posts/9ffef97c/</link>
      <pubDate>Thu, 01 Feb 2024 01:09:01 +0900</pubDate>
      
      <guid>https://www.tinclouds.com/posts/9ffef97c/</guid>
      <description>重度拖延症开始准备coding test了，也不知道到底需要多少。
如果不报line，应该easy就行了吧？
快慢指针 (环问题) 指fast一定能追上slow，通常设fast步长为2，slow为1
class Solution: def hasCycle(self, head: ListNode) -&amp;gt; bool: # 空链表或链表只有一个节点，无环 if not head or head.next == None: return False # 初始化快慢指针 fast = slow = head # 如果不存在环，肯定 fast 先指向 null # 细节：fast 每次走 2 步，所以要确定 fast 和 fast.next 不为空，不然会报执行出错。 while fast and fast.next: # 快指针移动 2 步，慢指针移动 1 步 fast = fast.next.next slow = slow.next # 快慢指针相遇，有环 if fast == slow: return True return False 两帧相遇在环的中途，（设：head到环起点为x，到环中途为y，绕回环起点为z）</description>
    </item>
    
  </channel>
</rss>
