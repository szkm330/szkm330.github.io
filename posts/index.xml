<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on SK&#39;s Nikkichou</title>
    <link>https://szkm330.github.io/posts/</link>
    <description>Recent content in Posts on SK&#39;s Nikkichou</description>
    <image>
      <title>SK&#39;s Nikkichou</title>
      <url>https://szkm330.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://szkm330.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 04 Feb 2024 01:50:49 +0900</lastBuildDate><atom:link href="https://szkm330.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基本情报刷题记录</title>
      <link>https://szkm330.github.io/posts/fe-siken/</link>
      <pubDate>Sun, 04 Feb 2024 01:50:49 +0900</pubDate>
      
      <guid>https://szkm330.github.io/posts/fe-siken/</guid>
      <description>基本情报技术者 备考笔记</description>
    </item>
    
    <item>
      <title>面试算法抱佛脚-栈/堆/哈希</title>
      <link>https://szkm330.github.io/posts/codetest-2/</link>
      <pubDate>Thu, 01 Feb 2024 08:37:20 +0900</pubDate>
      
      <guid>https://szkm330.github.io/posts/codetest-2/</guid>
      <description>stack stack = [ ]，进栈.append(data)，出栈.pop()，取顶stack[-1]
# 括号匹配问题，注意if的顺序的范围，及时return for char in string: if char in {&amp;#39;(&amp;#39;, &amp;#39;[&amp;#39;, &amp;#39;{&amp;#39;}: stack.push(char) elif char in {&amp;#39;)&amp;#39;, &amp;#39;]&amp;#39;, &amp;#39;}&amp;#39;} and len(stack.stack) &amp;gt; 0: if stack.gettop() == check_dict[char]: stack.pop() else: return False if len(stack.stack) == 0: return True else: return False heap 一般用于堆排序，优先队列。对于最小堆，每个点都小于或等于其子节点。
# 创建最小堆 heapq.heapify(list) # 如果堆的大小小于k，直接添加元素 # 否则，如果新元素大于堆顶元素，先弹出堆顶，再添加新元素 # 这样可以确保堆中始终是最大的k个元素 if len(self.heap) &amp;lt; self.k: heapq.heappush(self.heap, val) elif val &amp;gt; self.heap[0]: heapq.heappushpop(self.heap, val) # 堆顶元素是第k大的元素 return self.</description>
    </item>
    
    <item>
      <title>面试算法抱佛脚-LinkedList</title>
      <link>https://szkm330.github.io/posts/codetest-1/</link>
      <pubDate>Thu, 01 Feb 2024 01:09:01 +0900</pubDate>
      
      <guid>https://szkm330.github.io/posts/codetest-1/</guid>
      <description>重度拖延症开始准备coding test了，也不知道到底需要多少。
如果不报line，应该easy就行了吧？
快慢指针 (环问题) 指fast一定能追上slow，通常设fast步长为2，slow为1
class Solution: def hasCycle(self, head: ListNode) -&amp;gt; bool: # 空链表或链表只有一个节点，无环 if not head or head.next == None: return False # 初始化快慢指针 fast = slow = head # 如果不存在环，肯定 fast 先指向 null # 细节：fast 每次走 2 步，所以要确定 fast 和 fast.next 不为空，不然会报执行出错。 while fast and fast.next: # 快指针移动 2 步，慢指针移动 1 步 fast = fast.next.next slow = slow.next # 快慢指针相遇，有环 if fast == slow: return True return False 两帧相遇在环的中途，（设：head到环起点为x，到环中途为y，绕回环起点为z）</description>
    </item>
    
    <item>
      <title>利用git actions进行博客上传</title>
      <link>https://szkm330.github.io/posts/make-blog/</link>
      <pubDate>Fri, 17 Nov 2023 02:57:32 +0900</pubDate>
      
      <guid>https://szkm330.github.io/posts/make-blog/</guid>
      <description>建库，设key 一个公共放网页，username.github.io 一个私有放全部，blog Setting - Developer setting - Personal access tokens， 创建一个 Token，选repo和workflow权限（只能看一次，记得复制） 私有库的 Settings - Secrets - Actions 添加PERSONAL_TOKEN 设置 创建blog/.github/workflows/build.yml
name: github pages on: push: branches: - main # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: &amp;#39;latest&amp;#39; extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.</description>
    </item>
    
    <item>
      <title>记第一次托福</title>
      <link>https://szkm330.github.io/posts/2021-03-08/</link>
      <pubDate>Mon, 08 Mar 2021 18:12:29 +0900</pubDate>
      
      <guid>https://szkm330.github.io/posts/2021-03-08/</guid>
      <description>记录第一次的托福经历，我们下次托业见。
酒店环节 比我想象的要简单一些，我还以为要交押金呢，结果直接身份证就可以了。本想到附近的711买点饭团或便当作为晚饭，再顺便买面包牛奶当第二天早餐。结果最近的那家711在广外校内，我看着那个疫情期间“校外人员不得入内”的牌子，就放弃进去了（虽然我觉得应该能进去的吧）。
接着就是找附近的便利店、超市，但附近范围内的都是满简陋的那种小店，我不放心就还是放弃了。最后走了快二十分钟，到一个楼盘广场那边，在一个比较大规模的便利店买了面包牛奶，顺便在旁边吃了碗牛肉拉面，全程听着亭子里的大爷大妈唱卡拉OK。
算下来，这一天一直在走路。地铁站走到酒店二十分钟，酒店到吃饭的地方又是十几分钟。一整天不知道走了多少公里（笑），但脚似乎还好，看来是专业的竞走选手了。
考试入场 嗯&amp;hellip;我确认信上的考场号是XXXXXX-B，就是一个编号它分有AB，对应不同的教室。
门外要先进行签到，在表上找到自己名字并签名，保安大叔就会给一张承诺书（？），总之自己打印的那张纸是不能带进去的。我排进自己编号的那个队列，并一眼在左边的表上找到了自己的姓名，LI XINYUE。立马签名，工作人员在那张承诺书上写了个字母和编号，递给了我。
然后我去旁边存了行李，进门上楼。
低头一看手里的纸，上面写着一个大大的“A”。
虽然我觉得自己应该在B考试，但还是打算先按着工作人员的指示，先去了A考场。刷身份证进场的时候，老师说这个考场没有我。我就说可能是写错了吧，我在B。此时，我还以为是人家写错了而已。
老师在电脑上一通操作，说：”有两个LI XINYUE。“
啊这，真的有这么巧的事情吗？
就是说，我签到的时候，其实是帮另一个在A的人签了，然后保安大哥才给我写了A？
想到我考日语那时也走错了入口，我跟广外真的关系好差哦。
考试过程 经过上面那一通折腾，其实心已经蛮累了。因为第一次考啥也不懂，电脑也不敢乱碰。老师按程序帮我解锁了考试程序，我也不敢按”继续“，我以为是全场统一时间开始的。谁知道是自行开始的啊！我大概慢了一两分钟吧？老师提醒我可以开始，我才发现人家已经开始了。
首先是阅读。哪怕我在考完的现在打开百度，搜索”托福要考几篇阅读？“，搜到的也都是三篇。搜了半天，才看到是在当天库存中提取3~4篇。四篇！60分钟！而我一直照着原来20分钟一篇的速度！很刺激哦，最后一篇可以说是一目十行（笑）。
接着是听力。还记得我慢了别人一两分钟吗？重点来了，在我还在听的时候，不少人已经站起来走动，去吃东西上厕所了。众所周知，我的座位被随机抽到了第一排。这是什么意思呢？就是每个出门的人几乎都会经过我&amp;hellip;&amp;hellip;好尴尬哦（笑）。于是我当然决定，把最后一两篇听力没怎么注意听的责任，丢给这些走来走去的人啦！
口语。其实就是正常发挥吧，复习的时候也没有把它作为重点，也没指望拿太高的分。毕竟也是经历过广东英语高考的人，戴着耳机麦克风说话也不算太生疏。
作文。其实体验上来说，反而比六级要好。六级作文如果刚好不认识题目的那个单词，就连怎么编口水话都编不出来。这里作文题目好歹都能看懂，就顺着简单的逻辑往下编呗。高级词汇倒是没咋用了，但最起码凑够了字数，勉强就这样吧。
结果预测 点击提交的一瞬间，口语和阅读成绩就出来了，16、17。
唔&amp;hellip;那一瞬间就觉得没了。
本身复习的重点就在这两个上面，平时模拟也基本上能到22、23左右，所以我才觉得应该能80。而这俩一下少了10分，大概就是没了吧。我觉得可以马上开始购买托业资料了（笑）。
唉，这玩意咋说呢。其实一般大学院有个60分就都可以报名了，但问题是这帮竞争对手一个个都在刷分，而且冬季考本身合格名额就少，分数多1分，合格的可能性就大一些。还是刷托业吧。</description>
    </item>
    
    <item>
      <title>LrcToAss48: 口袋48弹幕转换</title>
      <link>https://szkm330.github.io/posts/lrc2ass/</link>
      <pubDate>Fri, 19 Feb 2021 04:24:11 +0900</pubDate>
      
      <guid>https://szkm330.github.io/posts/lrc2ass/</guid>
      <description>口袋48留言转滚动弹幕</description>
    </item>
    
    <item>
      <title>记歌词工具</title>
      <link>https://szkm330.github.io/posts/lyrics-tool/</link>
      <pubDate>Sun, 22 Mar 2020 16:57:28 +0900</pubDate>
      
      <guid>https://szkm330.github.io/posts/lyrics-tool/</guid>
      <description>给自己写了个小工具，用来平时每周MOR的歌词编辑。
虽然替换换行符功能不如直接打开word，但渐变色工具还是挺方便的。
以下是心得。
一般的main
if __name__ == &amp;#39;__main__&amp;#39;: QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling) app = QtWidgets.QApplication(sys.argv) mainwin = Ui_MainWindow() mainwin.show() sys.exit(app.exec_()) 如果是多窗口，要一起声明一遍，后面再用show和close进行关系调整
login = Ui_Dialog_in() win = Ui_MainWindow() login.show() 因为不是写在里面的，所以self要改成自己定的窗口名字
QtWidgets.QMessageBox.information(mainwin,&#39;Error&#39;,&#39;出现错误&#39;, QtWidgets.QMessageBox.Ok)
涉及特殊符号再用一个反斜杠 ，再用一个大括号
self.changeto.setText(&amp;#34;\\N{\\fn思源黑体}&amp;#34;) c0 = &amp;#39;{{\\1vc({},{},{},{})}}&amp;#39;.format(c1,c2,c3,c4) 剩下的就是git了
GitHub 远程端添加了 README.md 文件后，无法再次 push 的主要原因是 GitHub 中的README.md 文件不在本地代码目录中，需要合并同步
git pull --rebase origin master git push -u origin master </description>
    </item>
    
    <item>
      <title>git与github</title>
      <link>https://szkm330.github.io/posts/use-git/</link>
      <pubDate>Mon, 23 Sep 2019 14:35:45 +0900</pubDate>
      
      <guid>https://szkm330.github.io/posts/use-git/</guid>
      <description># 生成 ssh-keygen -t ed25519 -C “email@outlook.com” # 设置 git config --global user.name &amp;quot;user&amp;quot; git config --global user.email &amp;quot;email@outlook.com&amp;quot; git config --global init.defaultBranch main # 在文件夹下 git init # 初始化仓库 git add . # 添加该路径下所有文件 git commit -m &amp;quot;first commit&amp;quot; # 提交，m后是备注 git remote add origin https://github.com/szkm330/demo.git # 连接，仓库名origin git remote rm origin # 删除连接 git remote -v # 查看 git branch -M main # 换名 git branch -a # 查看 git push -u origin main # 上传 git pull origin main 官网摘录</description>
    </item>
    
    <item>
      <title>V2ray绚烂装订版</title>
      <link>https://szkm330.github.io/posts/use-v2ray/</link>
      <pubDate>Tue, 04 Jun 2019 21:37:53 +0900</pubDate>
      
      <guid>https://szkm330.github.io/posts/use-v2ray/</guid>
      <description>又研究了一下ws+tls，其实我也不知道有没有搞出来，也不知道到底效果如何，姑且搞一下&amp;hellip;
基本安装 # 刷新源及更新软件 sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade # 脚本安装 bash &amp;lt;(curl -L -s https://install.direct/go.sh) # 编辑 V2Ray 配置 vim /etc/v2ray/config.json bbr wget –no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh chmod +x bbr.sh ./bbr.sh 域名操作 注册域名，A 记录指向自己
生成证书，使用 acme.sh 脚本生成
curl https://get.acme.sh | sh # 安装到 ~/.acme.sh 目录下 source ~/.bashrc # 确保脚本所设置的命令别名生效 运行脚本所需工具
sudo apt-get install socat 如果安装报错，那么可能是因为系统缺少 acme.sh 所需要的依赖项sudo apt-get -y install netcat 开始生成证书，注意改成自己的域名
sudo ~/.acme.sh/acme.sh --issue -d mydomain.me --standalone -k ec-256 脚本每隔60天会自动更新，然后手动更新：</description>
    </item>
    
    <item>
      <title>第一篇</title>
      <link>https://szkm330.github.io/posts/2018-12-25/</link>
      <pubDate>Tue, 25 Dec 2018 08:05:29 +0900</pubDate>
      
      <guid>https://szkm330.github.io/posts/2018-12-25/</guid>
      <description>在考试周的地狱时间里，忙了一个晚上摸索搭建博客，通称摸鱼。
但不管怎样，我这种性格的人必须要弄出点类似的东西，才会有动力学习下去吧，不然就会在沉默中慢慢消逝了。
今天看了网上大佬的面试吐槽，突然有点慌，我一个傻子学了一年多好像什么也不会的样子，再这样下去我还不如当初去日语系呢。于是决定从现在开始慢慢学习下去，为了自己。</description>
    </item>
    
  </channel>
</rss>
