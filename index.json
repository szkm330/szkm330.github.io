[{"content":"テクノロジ系 基礎理論 音频压缩计算\n例题，周波数10kHz，ビット数16ビットで4秒間サンプリング，圧縮率1／4のADPCMを用いて圧縮した場合，データ量は20kバイト $$ 16bit \\rightarrow 2byte\\\\ 10k \\times2 \\times4 \\times \\frac{1}{4} = 20k $$\nアナログ信号 → デジタル信号：標本化（在一定时间间隔下进行测定）→量子化（将数值近似为整数）→符号化（整数转为2进制）\n送信誤り検出方式\nCRC方式(Cyclic Redundancy Check)： 巡回冗長検査，使用「生成多項式」进行检查 ハミング符号方式： 使用「検査ビット」 パリティチェック方式： 使用「パリティビット」，有垂直和水平两种方向 コンピュータ構成要素 CPU書き込む方式\nライトスルー(write through)，同时写入cache和主存。可保持一贯性，但速度慢 ライトバック(write back)，只写cache，丢掉时才写进主存。更复杂，但快 割込み(Interrupt)：暂停当前进程，优先处理\n内部割込み: 原因为执行中的程序（プログラム割込み，SVC割込み, ページフォールト） 外部割り込み:（タイマ割込み，コンソール割込み，入出力割込み，機械チェック割込み） MIPS(million instructions per second) CPU性能指标，1秒能执行 “x百万” 个命令\nシステム構成要素 予備系システム\nホットスタンバイ（即時復旧・高速復旧），一直在旁边一起同步热身，直接切换 ウォームスタンバイ（中間的復旧），开机待机了，但没有开系统 コールドスタンバイ（段階的復旧），只准备了场所，到时候搬器材过去重开 RAID：复数的HDD作为一个来使用\nRAID 0 （ストライピング） 分散写入多个硬盘，并列处理，高速化 RAID 1 （ミラーリング） 每个硬盘写入同样的data，信赖性提升，但效率下降 RAID 2 （基础：0） 读写单位bit，用ハミング符号订正 RAID 3 读写单位bit/byte，用パリティビット订正 RAID 4 （和3类似） 读写单位block RAID 5 读写单位block，パリティ（连订正用的也分散装了） システムの処理能力向上方法\nスケールアップ： 换更高级的配置，适用于 要频繁更新处理的 难以分散并列处理的系统 スケールアウト： 增加服务器的台数，适用于 不怎么考虑整合性 可以独立分散处理的系统 システム開発技術 エラー埋込法\n$\\frac{被发现的染色error数}{埋下的染色error数} = \\frac{没被染色的error数}{潜伏error数} $\nセキュリティ サイバーセキュリティ経営ガイドライン： 面对服务器攻击，企业的三原则\n领导要主动推进安全投资，因为这个不赚钱 还得关照供应链中的商业伙伴，不能只顾自己公司的安全 安全对策的相关，平时就要积极和关系者沟通。 AES-256: 使用256位密钥进行加密和解密。在ブルートフォース攻撃（暴力法）之下，最多要试$2^{256}$次，平均要试$2^{255}$次\n黑密码的方法\n辞書攻撃，使用常用语列表，逐一尝试 スニッフィング，窃听数据包 ブルートフォース攻撃，暴力法 攻击方式\nディレクトリトラバーサル攻撃： 根据文件路径，乱改乱窜 SQLインジェクション： 用sql命令攻击 XSS(クロスサイトスクリプティング)： 在html界面用恶意脚本，获取信息 セッションハイジャック： 窃取セッションID，装作用户本人 デジタル署名：\u0026ldquo;发件人私钥 \u0026ldquo;用于生成数字签名， \u0026ldquo;发件人公钥 \u0026ldquo;用于接收端的验证。接收端可以知道两点 → 发起者是否合法，文件是否被篡改（不能锁定被改的具体位置）\nWAF(Web Application Firewall)：Webアプリケーションに対する攻撃を検知し、遮断する\nルートキット(rootkit)：一类工具。留后门，隐藏入侵痕迹\nDNSキャッシュポイズニング伪造dns应答，用于邮件，诱导至假网站\n情報セキュリティ\n信頼性(Reliability)，期待した処理が確実に行われている 真正性(Authenticity)，主張のとおり本物である 可用性(Availability)，使用が可能 機密性(Confidentiality)，認可されていない方に対して，情報を使用させず，開示しない ネットワーク CGICommon Gateway Interface，一种仕組み，用于连接web服务器和外部程序，构建动态web页面，一般用PHP或Perl\nDHCP(Dynamic Host Configuration Protocol)は、TCP/IP中，自动分配ip的协议，IP資源の有効活用\nNAPT(IPマスカレード)1个グローバルIP，复数PC可以使用\nTCP ランスポート層の伝送制御プロトコル， 信頼性重視\nUDP通信効率、リアルタイム性重視\nCSMA/CD方式有线网络传输中的防撞车机制。路上有人我就不出门了啊，如果撞了就暂停之后再重发\nメール\nSMTP： 接发邮件的协议，用的是ASCII，只能英文 MIME： 扩张了，不仅可日语，还能图片音频 S/MIME： 加了暗号化+电子署名 データベース ロック粒度：锁定的单位，粒度越小，越不塞 → 增强并行性\nSQL语句\n直積，普通的全都要，普通的$SELECT * FROM R，S$ EXCEPT，差集合，R-S UNION，$R \\cup S$ INTERSECT，$R \\cap S$ GRANT，赋予权限，REVOKE为取消 ALTER USER，设密码 データ型\nキーバリューストア(KVS)：data存储类型，键值对应。结构简单，速度快，用于处理大数据 グラフ型：用（点，关系，属性）表示 ドキュメント指向：用XML，JSON等存储 関係データベース：基于集合论，用table存储 ロールバック使用更新前log进行回滚\n2相コミット在分散DB中，先确认大家是否可以更新，都同意了再进行更新处理\nアルゴリズムとプログラミング 2分探索法中央值和目的值进行比较，将搜索范围缩小一半\nソフトウェア LRU(Least Recently Used)将最早参照的page作为置换对象\nLFU(Least Frequently Used)按单位时间内的参照频度\nHadoop用于大数据的分散处理，Hadoop = HDFS(分散文件系统) + MapReduce(分散处理技术框架)\nハードウェア アクチュエータ(Actuator)将電気信号 转为 力学运动\nメモリ\nRAM （挥发性） DRAM （需refresh）\u0026ndash;› SDRAM 主存 SRAM （不需refresh）cache，和clock同步 ROM （不挥发性） マスクROM （只读） **PROM ** （可写） EPROM 用紫外线消除data EEROM 用电气消除data \u0026ndash;› Flash Memory SSD，USB メモリセルメモリ的最小单位（放0和1）\nコンデンサ：用于主存（DRAM），可存储电气的电子部品 フリップフロップ回路：用于cache（SRAM），顺序回路（根据过去的输入进行输出） ソフトウェア開発管理技術 リファクタリング(Refactoring)重构，指只改内部，外部看起来不变。提高保守性\nテスト駆動開発为了迅速开发，先设定测试\nプロトタイピング在早期完成试作品，得到用户反馈\nマネジメント系 プロジェクトマネジメント WBS(Work Breakdown Structure)：对各个阶段的目标进行细分化\n品質評価\n保守性，修正のしやすさ トレンドチャート两根折线（实绩+预定），表示 進捗状況+预算消費状況\nサービスマネジメント SPD(Surge Protective Device，サージ防護機器)：過電圧の被害から機器を防御する\nエラープルーフ化为减少人为错误，对（机器，方法）等「人外因素」进行改善\nバックアップ总之不能随便删。对于分散存储的数据，要等大家都处理完毕了再进行备份，最好在复数媒体上备份\nシステム監査 コントロールトータルチェック对比检查「发送时的总数」和「接收时的总数」\nストラテジ系 経営戦略マネジメント バランススコアカード(Balanced Score Card、BSC)：从4个角度来评价业绩（设立指标）\n财务角度，怎样满足股东等的期待 客户角度，设定对客户的行动指标 内部业务流程角度，各种xx率 学习成长角度，怎样才能成长 コストプラス法设定价格时，在成本基础上，加上利益。製品価格＝直接費＋間接費＋利益\n业务流程用语\nMBO（Management by Objectives）： 设立目标，自主管理 KGI（Key Goal Indicator）： 重要目標達成指標 CSF（Critical Success Factor）： 重要成功要因，指要重点投入资源的地方 KPI（Key Performance Indicator）： 重要業績評価指標 技術戦略マネジメント コモディティ化汎用品化，指大家的产品都差不多，除了降价没有别的竞争方法，最终导致大家的收益降低\nTLO(Technology Licensing Organization)技術移転機関。大学的研究成果申请专利，转让技术给民间企业\nビジネスインダストリ EDI(Electronic Data Interchange)：一种规约，用于不同设备经过通信回线进行交易。可分为4个方面\n情报传达，网络选择，传送方法等 情报表现，保证这个数据每个电脑都能看懂 业务运用，业务及系统的运用层次的东西 取引基本，花钱收货相关的法律有效性 HEMS(Home Energy Management System，ヘムス)：将家庭电器用网络连接，通过可视化能量消费等，达到节能效果\nRFID(Radio Frequency IDentifier)：使用RFタグ(ICタグ)，在数cm～数m距离。汚れに強く，記録された情報を梱包の外から読むことができる\nエスクローサービス网购中的第三方中介。先付款给中介，收货后，中介给店家打钱\nSEO(Search Engine Optimization)为了排在搜索引擎的前面，对网站进行各种优化\n法務 集団思考(グループシンク)：在团队具有高度凝聚力、存在封闭系统等缺陷以及团队压力较大的情况下，做出了非理性决定\n刑法\nコンピュータやデータを破壊する DoS攻撃によるサービス妨害 メールボムによるメールサーバ妨害 Webページの改ざん 電子署名法与手写签名以及盖章有同等的效应\nシステム戦略 NPV法(Net Present Value)正味現在価値法，$NPV（正味現在価値） ＝ PV（現在価値） － 投資額$\n设一个割引率，对投资进行评价。假设进行投资，割引率为5%，1年后拿到的100的价值为「$100/1.05$」，2年后的为「$100/1.05/1.05$」，即拖得越久越不值钱\nSOA(Service Oriented Architecture：サービス指向アーキテクチャ)，一种设计方式，将系统以「service」为单位进行分割组装\nROI(Return On Investment)投資利益率，$ROI(%) = \\frac{利益}{投资额} \\times 100$\nデジタルディバイド(Digital Divide)一种现象，指由于情報格差，导致社会 贫富方面的差距\nシステム企画 アカウントアグリゲーション(aggregation)所有银行口座情报集合在一起表示的一种サービス\n企業活動 連関図法：为了搞清楚「复杂因素」之中的东西，将事件的「因果关系」表达出来\n親和図法：将情报「グループ化」，明确问题所在\n系統図法：按顺序展开各类手段方针，追求最佳方法\nPDPC法：假定问题，讨论对应方法\nOC曲線(検査特性曲線: Operating Characteristic curve)：ロットの不良率とそのロットの合格率の関係を表したもの\n利益计算\n売上総利益 ＝ 売上高 － 売上原価 営業利益 ＝ 売上総利益 － 販売費及び一般管理費 経常利益 = 営業利益 + 営業外収益 - 営業外費用 貸借対照表分为以下三部分，且算出各自所占比率\n資産： 流动资产(赚钱) + 固定资产（投资等） 負債： 流动负债 + 固定负债 純資産： 资本金 + 利益剰余金 ","permalink":"https://szkm330.github.io/posts/%E5%9F%BA%E6%9C%AC%E6%83%85%E6%8A%A5%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/","summary":"テクノロジ系 基礎理論 音频压缩计算\n例题，周波数10kHz，ビット数16ビットで4秒間サンプリング，圧縮率1／4のADPCMを用いて圧縮した場合，データ量は20kバイト $$ 16bit \\rightarrow 2byte\\\\ 10k \\times2 \\times4 \\times \\frac{1}{4} = 20k $$\nアナログ信号 → デジタル信号：標本化（在一定时间间隔下进行测定）→量子化（将数值近似为整数）→符号化（整数转为2进制）\n送信誤り検出方式\nCRC方式(Cyclic Redundancy Check)： 巡回冗長検査，使用「生成多項式」进行检查 ハミング符号方式： 使用「検査ビット」 パリティチェック方式： 使用「パリティビット」，有垂直和水平两种方向 コンピュータ構成要素 CPU書き込む方式\nライトスルー(write through)，同时写入cache和主存。可保持一贯性，但速度慢 ライトバック(write back)，只写cache，丢掉时才写进主存。更复杂，但快 割込み(Interrupt)：暂停当前进程，优先处理\n内部割込み: 原因为执行中的程序（プログラム割込み，SVC割込み, ページフォールト） 外部割り込み:（タイマ割込み，コンソール割込み，入出力割込み，機械チェック割込み） MIPS(million instructions per second) CPU性能指标，1秒能执行 “x百万” 个命令\nシステム構成要素 予備系システム\nホットスタンバイ（即時復旧・高速復旧），一直在旁边一起同步热身，直接切换 ウォームスタンバイ（中間的復旧），开机待机了，但没有开系统 コールドスタンバイ（段階的復旧），只准备了场所，到时候搬器材过去重开 RAID：复数的HDD作为一个来使用\nRAID 0 （ストライピング） 分散写入多个硬盘，并列处理，高速化 RAID 1 （ミラーリング） 每个硬盘写入同样的data，信赖性提升，但效率下降 RAID 2 （基础：0） 读写单位bit，用ハミング符号订正 RAID 3 读写单位bit/byte，用パリティビット订正 RAID 4 （和3类似） 读写单位block RAID 5 读写单位block，パリティ（连订正用的也分散装了） システムの処理能力向上方法","title":"基本情报刷题记录"},{"content":"stack stack = [ ]，进栈.append(data)，出栈.pop()，取顶stack[-1]\n# 括号匹配问题，注意if的顺序的范围，及时return for char in string: if char in {\u0026#39;(\u0026#39;, \u0026#39;[\u0026#39;, \u0026#39;{\u0026#39;}: stack.push(char) elif char in {\u0026#39;)\u0026#39;, \u0026#39;]\u0026#39;, \u0026#39;}\u0026#39;} and len(stack.stack) \u0026gt; 0: if stack.gettop() == check_dict[char]: stack.pop() else: return False if len(stack.stack) == 0: return True else: return False heap 一般用于堆排序，优先队列。对于最小堆，每个点都小于或等于其子节点。\n# 创建最小堆 heapq.heapify(list) # 如果堆的大小小于k，直接添加元素 # 否则，如果新元素大于堆顶元素，先弹出堆顶，再添加新元素 # 这样可以确保堆中始终是最大的k个元素 if len(self.heap) \u0026lt; self.k: heapq.heappush(self.heap, val) elif val \u0026gt; self.heap[0]: heapq.heappushpop(self.heap, val) # 堆顶元素是第k大的元素 return self.heap[0] ","permalink":"https://szkm330.github.io/posts/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E6%8A%B1%E4%BD%9B%E8%84%9A-%E6%A0%88%E5%A0%86%E5%93%88%E5%B8%8C/","summary":"stack stack = [ ]，进栈.append(data)，出栈.pop()，取顶stack[-1]\n# 括号匹配问题，注意if的顺序的范围，及时return for char in string: if char in {\u0026#39;(\u0026#39;, \u0026#39;[\u0026#39;, \u0026#39;{\u0026#39;}: stack.push(char) elif char in {\u0026#39;)\u0026#39;, \u0026#39;]\u0026#39;, \u0026#39;}\u0026#39;} and len(stack.stack) \u0026gt; 0: if stack.gettop() == check_dict[char]: stack.pop() else: return False if len(stack.stack) == 0: return True else: return False heap 一般用于堆排序，优先队列。对于最小堆，每个点都小于或等于其子节点。\n# 创建最小堆 heapq.heapify(list) # 如果堆的大小小于k，直接添加元素 # 否则，如果新元素大于堆顶元素，先弹出堆顶，再添加新元素 # 这样可以确保堆中始终是最大的k个元素 if len(self.heap) \u0026lt; self.k: heapq.heappush(self.heap, val) elif val \u0026gt; self.heap[0]: heapq.heappushpop(self.heap, val) # 堆顶元素是第k大的元素 return self.","title":"面试算法抱佛脚-栈/堆/哈希"},{"content":"重度拖延症开始准备coding test了，也不知道到底需要多少。\n如果不报line，应该easy就行了吧？\n快慢指针 (环问题) 指fast一定能追上slow，通常设fast步长为2，slow为1\nclass Solution: def hasCycle(self, head: ListNode) -\u0026gt; bool: # 空链表或链表只有一个节点，无环 if not head or head.next == None: return False # 初始化快慢指针 fast = slow = head # 如果不存在环，肯定 fast 先指向 null # 细节：fast 每次走 2 步，所以要确定 fast 和 fast.next 不为空，不然会报执行出错。 while fast and fast.next: # 快指针移动 2 步，慢指针移动 1 步 fast = fast.next.next slow = slow.next # 快慢指针相遇，有环 if fast == slow: return True return False 两帧相遇在环的中途，（设：head到环起点为x，到环中途为y，绕回环起点为z）\n相遇时，slow走过x+y，fast则走了x+y+z+y，\n且根据fast = 2slow，可解得x = z\n因此，若此时再安排一个slow2从head出发，两个slow正好能在环起点相遇，便可以return出环起点的位置\nslow = fast = head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: slow2 = head while slow != slow2: slow = slow.next slow2 = slow2.next return slow return None 有序列表 大概就是有序列表中的删除问题，easy的话就是基本指向next，大家都变1个，注意边界就好。\n下面这个不止要删重复的，重复的要变0个\nwhile p2 and p2.next: if p2.val == p2.next.val: # 循环，将p2指向结束重复的坐标，p1连过去，以此删去所有重复的元素 while p2.next and p2.val == p2.next.val: p2 = p2.next p1.next = p2.next else: # 各自前进一格 p1 = p1.next p2 = p2.next 进位加法 class Solution(object): def addTwoNumbers(self, l1, l2): # 创建一个虚拟头节点 dummy = ListNode(0) head = dummy up = 0 # 表示进位 # 遍历两个链表 while l1 or l2 or up: val1 = l1.val if l1 else 0 val2 = l2.val if l2 else 0 res = val1 + val2 + up # 计算进位和当前位 up = res // 10 res = res % 10 # 创建新节点并移动指针 head.next = ListNode(res) head = head.next # 移动l1和l2指针 if l1: l1 = l1.next if l2: l2 = l2.next # 返回结果链表的头节点（跳过虚拟头节点） return dummy.next ","permalink":"https://szkm330.github.io/posts/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E6%8A%B1%E4%BD%9B%E8%84%9A-linkedlist/","summary":"重度拖延症开始准备coding test了，也不知道到底需要多少。\n如果不报line，应该easy就行了吧？\n快慢指针 (环问题) 指fast一定能追上slow，通常设fast步长为2，slow为1\nclass Solution: def hasCycle(self, head: ListNode) -\u0026gt; bool: # 空链表或链表只有一个节点，无环 if not head or head.next == None: return False # 初始化快慢指针 fast = slow = head # 如果不存在环，肯定 fast 先指向 null # 细节：fast 每次走 2 步，所以要确定 fast 和 fast.next 不为空，不然会报执行出错。 while fast and fast.next: # 快指针移动 2 步，慢指针移动 1 步 fast = fast.next.next slow = slow.next # 快慢指针相遇，有环 if fast == slow: return True return False 两帧相遇在环的中途，（设：head到环起点为x，到环中途为y，绕回环起点为z）","title":"面试算法抱佛脚-LinkedList"},{"content":"建库，设key 一个公共放网页，username.github.io 一个私有放全部，blog Setting - Developer setting - Personal access tokens， 创建一个 Token，选repo和workflow权限（只能看一次，记得复制） 私有库的 Settings - Secrets - Actions 添加PERSONAL_TOKEN 设置 创建blog/.github/workflows/build.yml\nname: github pages on: push: branches: - main # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: personal_token: ${{ secrets.PERSONAL_TOKEN }} external_repository: szkm330/szkm330.github.io publish_branch: main publish_dir: ./public 日常使用 # 第一次安装 git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod # 重新clone的时候 git clone git submodule update --init --recursive # 初始化更新theme子模块 git submodule update --remote --merge # 如果主题有更新 ----- # 一般使用 hugo new posts/a.md git add . git commit -m \u0026#34;\u0026#34; git push ","permalink":"https://szkm330.github.io/posts/%E5%88%A9%E7%94%A8git-actions%E8%BF%9B%E8%A1%8C%E5%8D%9A%E5%AE%A2%E4%B8%8A%E4%BC%A0/","summary":"建库，设key 一个公共放网页，username.github.io 一个私有放全部，blog Setting - Developer setting - Personal access tokens， 创建一个 Token，选repo和workflow权限（只能看一次，记得复制） 私有库的 Settings - Secrets - Actions 添加PERSONAL_TOKEN 设置 创建blog/.github/workflows/build.yml\nname: github pages on: push: branches: - main # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.","title":"利用git actions进行博客上传"},{"content":"# 生成 ssh-keygen -t ed25519 -C “email@outlook.com” # 设置 git config --global user.name \u0026quot;user\u0026quot; git config --global user.email \u0026quot;email@outlook.com\u0026quot; git config --global init.defaultBranch main # 在文件夹下 git init # 初始化仓库 git add . # 添加该路径下所有文件 git commit -m \u0026quot;first commit\u0026quot; # 提交，m后是备注 git remote add origin https://github.com/szkm330/demo.git # 连接，仓库名origin git remote rm origin # 删除连接 git remote -v # 查看 git branch -M main # 换名 git branch -a # 查看 git push -u origin main # 上传 git pull origin main 官网摘录\n…or create a new repository on the command line\necho \u0026#34;# LrcToAss48\u0026#34; \u0026gt;\u0026gt; README.md git init git add README.md git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin https://github.com/szkm330/LrcToAss48.git git push -u origin main …or push an existing repository from the command line\ngit remote add origin https://github.com/szkm330/LrcToAss48.git git branch -M main git push -u origin main ","permalink":"https://szkm330.github.io/posts/git%E4%B8%8Egithub/","summary":"# 生成 ssh-keygen -t ed25519 -C “email@outlook.com” # 设置 git config --global user.name \u0026quot;user\u0026quot; git config --global user.email \u0026quot;email@outlook.com\u0026quot; git config --global init.defaultBranch main # 在文件夹下 git init # 初始化仓库 git add . # 添加该路径下所有文件 git commit -m \u0026quot;first commit\u0026quot; # 提交，m后是备注 git remote add origin https://github.com/szkm330/demo.git # 连接，仓库名origin git remote rm origin # 删除连接 git remote -v # 查看 git branch -M main # 换名 git branch -a # 查看 git push -u origin main # 上传 git pull origin main 官网摘录","title":"git与github"},{"content":" ","permalink":"https://szkm330.github.io/about/","summary":"about","title":"About"}]