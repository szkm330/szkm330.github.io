[{"content":"テスト１ Week2 序言 提出一个准确的问题 → 阅读和分析文献 → 实验，收集相关的证据 → 形成推理链 → 出版 研究是产生论文和论文的过程，因为这些代表了我们公认的科学知识的存储。如果我们的工作有价值，就必须以某种方式被其他人采用。 开篇 研究调查的起源通常是一个洞察的瞬间 第一步是主观的：选择那些看似有可能成功的，或是与公认智慧相矛盾的。最终成果是客观的科学报告，但好奇心才是确定方向的关键。 有些学生对研究有明确想法，但大多数学生，实际上是在寻找topic和advisor，虽有研究的愿望，但对研究的内涵没有明确概念。 在做出选择并开始认真研究之前，可能会与几位顾问讨论一系列可能的项目。 制定研究项目 对于博士学位这样的大型研究项目，既有短期目标，也有长期目标。短期目标：当前的具体探索，旨在形成初步研究论文。长期目标：更广泛的调查，最终将构成学位论文的基础 开始研究时，需要确定两个问题。（1）要研究的大问题是什么？（2）最初要开展的具体活动和追求的成果是什么？ → 助力培养研究要素：planning, reading, programming, testing, analysis, critical thinking, writing, and presentation. 有成效的研究往往是由一个激励性实例推动的，有助于将活动集中在有用的目标上。探讨假设的问题可能容易，但评估方案的有效性却很困难 选择合适的导师。将导师视为一个人，而不仅是一个尊敬的研究者 考虑技术水平。如果没有相应的数学、编程等技能，就不要选相应的项目 随着领域成熟，门槛上升，探索其他方向可能更有意义 追求最有趣的小问题。如果在早期就能取得成果，就可以直接转向更具挑战性的目标。巨大发现很罕见，微小的进步更实际。确定可以明确实现的成果是有意义的。　已有商业解决方法的问题也可以研究。在商业中，任务是找到可行的解决方案，而在研究中，必须对解决方案的质量进行衡量。因此，对同一问题的研究也可能产生不同的结果。 研究规划 本科教学中拥有多个DDL（听课，作业，考试），形成一个结构。但研究一般只有一个最终DDL。为研究人为设定一系列的里程碑至关重要。 明确最终目标，反向推理。最终需要论文，则对撰写所需的步骤进行规划。如背景、先前算法和新算法的解释、实验描述以及结果分析。完成每项内容都是一个里程碑。 应事先确定研究的各个组成部分，但不一定要依次完成。同时注意：收集哪些证据，才能让持怀疑态度的读者相信研究结果是正确的？ 传统策略是阅读文献，设计，分析，测试，撰写报告。更有效的策略是尽可能将这些阶段重叠起来。 想知道研究工作是否做得足够 → 写论文。一旦论文大致完成，就很容易看出是否有必要继续做。 师生 研究项目的目的：为学生提供研究培训，包括独立工作和提出新颖、批判性见解等技能。指导方法基于边做边学的策略。 早期阶段，导师会指定每一小步。随着时间的推移，双方的关系就由管理变成了指导。逐渐给学生留出更多的空间，让他们发挥独立性。 师生关系不仅涉及研究培训，也是导师参与特定课题研究的一种手段。因此，学生和导师经常一起撰写论文。这可能会造成冲突（被指派多余的工作），也会发挥积极作用（团队合作） 成功学生的特征：（1）广泛阅读的意愿；（2）对一个领域的热情；（3）能力与毅力，进行详细调查；（4）主动去做；（5）组织性，自律；（6）积极反思；（7）看起来合理；（8）能在失败后重新站起来。 聪明人不一定成为出色的博士生，因为他们低估了长期学习的挑战。更重要的是毅力和韧性 Week3 序言 需要时间来深入了解该领域、现有知识及其局限性 → 成为论文的有效读者 有效读者：能够识别一篇论文的贡献，价值，和缺陷。利用批判性审查来确定论文缺陷的严重程度。 研究文献 阅读目的：（1）确认自己的创新性；（2）了解当前领域情况；（3）确定新的调查方向；（4）为工作提供其他视角。 → 写在论文中的background和discussions部分 文章中的论点，应建立在值得信任的文献基础上。但自己学习可以在更广泛的资料基础上 文献不需要弄懂每一行。先粗读，觉得有用再精读 阅读模式：（1）浏览查找，看概要，看结果；（2）了解背景；（3）深入集中阅读复杂文章 找文章 帮助你认识到，哪些文章是重要的，哪些是要跟进的方向。方法如下： 使用明显的搜索条件 主流搜索引擎 访问研究团队的网站 顺着参考文献找 近期的期刊和会议 特定出版社的电子图书馆，如IEEE 使用Citation Index（引用索引） 去图书馆 参与讨论 在研究过程中，主题、兴趣、重点、范围、视角可能会变化 → 在研究过程中不断更新 查找和阅读可以分开。先埋头搜一堆，然后再分析分类。 要诚实。不要去研究一个已经解决的问题（如果实在找不到创新点） 批判性阅读 阅读的主要目的为，培养批判性思维。因为很多文章其实没有意义。被引用不代表是好的，一篇论文只代表它在某一时刻的缩影，有局限性。 时常抱有以下的疑问：（1）有贡献吗，意义重大吗？（2）结果正确吗？（3）是否讨论了适当的文献？（4）提案方法是否解决了最初的问题？（5）有对结果进行批判性分析吗？（6）根据结果得出了适当的结论？（7）所有技术细节正确？（8）结果能否被验证？（9）是否含糊不清，前后矛盾？ 积极找出贡献和不足。 写下对论文的分析。研究过程中，查文献不能停 文献综述 对大量文献的结构化分析。 按主题分组，批判性讨论，让读者了解其对该领域的贡献、局限性以及待解决的问题。 开始阅读后，立即开始粗略的文献综述。在阅读过程中记录书目数据，并保留每篇论文的副本。添加论文时，按照主题分组，并添加每篇的注释以及它们之间的关系。 早期尽量保持广泛性，不要彻底删除，不要了就注释掉 编辑与审稿 作者应诚实、道德、谨慎。论文内容的正确性是作者的责任，而不是期刊、编辑或审稿人的责任 审稿人只有在确信论文达到足够标准时才建议接受 编辑的职责是合理选择审稿人，确保审稿工作及时完成。在审稿评价不一致，或作者认为评价不合理时进行仲裁，并根据审稿结果决定是否接收论文 贡献 贡献是评判论文的主要标准。从广义上讲，如果一篇论文具有原创性和有效性，那么它就是一篇有贡献的论文。在评估一项贡献的重要性时，考虑其效果和影响。即论文发表并被广泛阅读后，会带来多大的变化。 原创性，指有趣或重要的想法，比对现有工作的增量更有价值。有效性，指论文观点的合理程度。 在算法领域，使用理论和数学分析是公认手段。因为计算机技术是短暂的，但理论成果却是永恒的。无论是理论还是实验，对有效性的证明都应该是严谨的。与现有工作的比较是证明有效性的重要部分。 评估 以下问题： 贡献是否及时，还是只具有历史意义？ 主题是否与刊物的典型读者群相关 还缺少什么？怎样才能使演示更加完整？是否有不必要的材料？ 可能的读者群有多广泛 论文能否被理解？写得清楚吗？表述是否恰当？ 内容长度是否合理 从参考书目中可以看出论文的质量。只有几篇参考文献可能是学术水平低下的证据（少数例外），如果只有几篇参考文献是近期的，那么作者似乎对其他研究并不熟悉 审稿人应努力寻找不影响作品质量但应在印刷前纠正的错误 如果下标混淆或符号不断变换大小写，很可能是作者没有足够仔细检查。拒绝该论文并希望作者再次审查，这可能是合理的 Week4 假说 无论在哪个领域，如果希望取得可靠的研究成果，就必须有一个假设，应具体、准确 调查很可能是出于主观原因进行的，但研究的最终报告，必须是客观的 假设必须是可检验的。假设的范围应限制在可以进行探索的领域内，且应该能够被证伪 实验的意义在于巩固，然后用它们来预测未来。在初步测试之后，可能有必要重新定义假设。科学进步的大部分过程，都可以被视为重新定义和发展假设，以适应新的观察结果。 假说不应该跟着实验走。实验只是提供了观察结果，只有当它能够成功预测时，才能被视为得到证实。先假设，后检验。（ \u0026ldquo;A在X数据上有效 \u0026ldquo;属于观察结果， \u0026ldquo;预测A可在任何此类数据上有效，且该预测已在X数据上得到证实 \u0026ldquo;属于经过验证的假设） 为假说辩护 优秀论文 = 一个准确、有趣的假设 + 对假设的检验、证据的展示。 在提出假设时，需要构建一个与证据相关的论点 可以通过考虑假设的效果来初步检验假设，即研究是否有简单的论据支持保留或放弃假设。 证据形式 论文可视为证据和支持性解释的集合体。广义上讲，有四种证据可以用来支持假设： 证明，对假设正确（或错误）的正式论证 建模，对假设的数学描述 模拟，通常是假设的简化形式的实施。优势是可以平滑调整参数，能够观察各种输入。然而，模拟存在不切实际或简单化的风险，其特性意味着观察到的结果不会在实践中出现。因此，最终还需要与现实进行验证。 实验，对假设的全面检验，以真实数据为基础。理想情况下，实验应根据模型的预测来进行，从而得出一些预期的行为。理论家根据已知的观察结果建立现象模型；实验家则通过新的实验寻求证实。 证据使用 在选择使用证明、模型、模拟或实验作为证据时，要考虑每种证据对读者的说服力。 测量方法 实验的目的是测量可用作证据的数据 一个强有力的研究计划，部分取决于对定性目标与该目标的不同定量近似值之间区别的认识。 科学的好与坏 完全由建议和推测组成，完全没有认真尝试评估的研究可能更难得到尊重。 如果用于描述工作的术语过于复杂，工作质量就可能不明确。 伪科学的定义是，利用科学的语言和可敬性，为并非基于符合科学标准的证据的言论赢得可信度。 研究反思 Week5 Week6 ","permalink":"https://www.tinclouds.com/posts/1b8a5700/","summary":"テスト１ Week2 序言 提出一个准确的问题 → 阅读和分析文献 → 实验，收集相关的证据 → 形成推理链 → 出版 研究是产生论文和论文的过程，因为这些代表了我们公认的科学知识的存储。如果我们的工作有价值，就必须以某种方式被其他人采用。 开篇 研究调查的起源通常是一个洞察的瞬间 第一步是主观的：选择那些看似有可能成功的，或是与公认智慧相矛盾的。最终成果是客观的科学报告，但好奇心才是确定方向的关键。 有些学生对研究有明确想法，但大多数学生，实际上是在寻找topic和advisor，虽有研究的愿望，但对研究的内涵没有明确概念。 在做出选择并开始认真研究之前，可能会与几位顾问讨论一系列可能的项目。 制定研究项目 对于博士学位这样的大型研究项目，既有短期目标，也有长期目标。短期目标：当前的具体探索，旨在形成初步研究论文。长期目标：更广泛的调查，最终将构成学位论文的基础 开始研究时，需要确定两个问题。（1）要研究的大问题是什么？（2）最初要开展的具体活动和追求的成果是什么？ → 助力培养研究要素：planning, reading, programming, testing, analysis, critical thinking, writing, and presentation. 有成效的研究往往是由一个激励性实例推动的，有助于将活动集中在有用的目标上。探讨假设的问题可能容易，但评估方案的有效性却很困难 选择合适的导师。将导师视为一个人，而不仅是一个尊敬的研究者 考虑技术水平。如果没有相应的数学、编程等技能，就不要选相应的项目 随着领域成熟，门槛上升，探索其他方向可能更有意义 追求最有趣的小问题。如果在早期就能取得成果，就可以直接转向更具挑战性的目标。巨大发现很罕见，微小的进步更实际。确定可以明确实现的成果是有意义的。　已有商业解决方法的问题也可以研究。在商业中，任务是找到可行的解决方案，而在研究中，必须对解决方案的质量进行衡量。因此，对同一问题的研究也可能产生不同的结果。 研究规划 本科教学中拥有多个DDL（听课，作业，考试），形成一个结构。但研究一般只有一个最终DDL。为研究人为设定一系列的里程碑至关重要。 明确最终目标，反向推理。最终需要论文，则对撰写所需的步骤进行规划。如背景、先前算法和新算法的解释、实验描述以及结果分析。完成每项内容都是一个里程碑。 应事先确定研究的各个组成部分，但不一定要依次完成。同时注意：收集哪些证据，才能让持怀疑态度的读者相信研究结果是正确的？ 传统策略是阅读文献，设计，分析，测试，撰写报告。更有效的策略是尽可能将这些阶段重叠起来。 想知道研究工作是否做得足够 → 写论文。一旦论文大致完成，就很容易看出是否有必要继续做。 师生 研究项目的目的：为学生提供研究培训，包括独立工作和提出新颖、批判性见解等技能。指导方法基于边做边学的策略。 早期阶段，导师会指定每一小步。随着时间的推移，双方的关系就由管理变成了指导。逐渐给学生留出更多的空间，让他们发挥独立性。 师生关系不仅涉及研究培训，也是导师参与特定课题研究的一种手段。因此，学生和导师经常一起撰写论文。这可能会造成冲突（被指派多余的工作），也会发挥积极作用（团队合作） 成功学生的特征：（1）广泛阅读的意愿；（2）对一个领域的热情；（3）能力与毅力，进行详细调查；（4）主动去做；（5）组织性，自律；（6）积极反思；（7）看起来合理；（8）能在失败后重新站起来。 聪明人不一定成为出色的博士生，因为他们低估了长期学习的挑战。更重要的是毅力和韧性 Week3 序言 需要时间来深入了解该领域、现有知识及其局限性 → 成为论文的有效读者 有效读者：能够识别一篇论文的贡献，价值，和缺陷。利用批判性审查来确定论文缺陷的严重程度。 研究文献 阅读目的：（1）确认自己的创新性；（2）了解当前领域情况；（3）确定新的调查方向；（4）为工作提供其他视角。 → 写在论文中的background和discussions部分 文章中的论点，应建立在值得信任的文献基础上。但自己学习可以在更广泛的资料基础上 文献不需要弄懂每一行。先粗读，觉得有用再精读 阅读模式：（1）浏览查找，看概要，看结果；（2）了解背景；（3）深入集中阅读复杂文章 找文章 帮助你认识到，哪些文章是重要的，哪些是要跟进的方向。方法如下： 使用明显的搜索条件 主流搜索引擎 访问研究团队的网站 顺着参考文献找 近期的期刊和会议 特定出版社的电子图书馆，如IEEE 使用Citation Index（引用索引） 去图书馆 参与讨论 在研究过程中，主题、兴趣、重点、范围、视角可能会变化 → 在研究过程中不断更新 查找和阅读可以分开。先埋头搜一堆，然后再分析分类。 要诚实。不要去研究一个已经解决的问题（如果实在找不到创新点） 批判性阅读 阅读的主要目的为，培养批判性思维。因为很多文章其实没有意义。被引用不代表是好的，一篇论文只代表它在某一时刻的缩影，有局限性。 时常抱有以下的疑问：（1）有贡献吗，意义重大吗？（2）结果正确吗？（3）是否讨论了适当的文献？（4）提案方法是否解决了最初的问题？（5）有对结果进行批判性分析吗？（6）根据结果得出了适当的结论？（7）所有技术细节正确？（8）结果能否被验证？（9）是否含糊不清，前后矛盾？ 积极找出贡献和不足。 写下对论文的分析。研究过程中，查文献不能停 文献综述 对大量文献的结构化分析。 按主题分组，批判性讨论，让读者了解其对该领域的贡献、局限性以及待解决的问题。 开始阅读后，立即开始粗略的文献综述。在阅读过程中记录书目数据，并保留每篇论文的副本。添加论文时，按照主题分组，并添加每篇的注释以及它们之间的关系。 早期尽量保持广泛性，不要彻底删除，不要了就注释掉 编辑与审稿 作者应诚实、道德、谨慎。论文内容的正确性是作者的责任，而不是期刊、编辑或审稿人的责任 审稿人只有在确信论文达到足够标准时才建议接受 编辑的职责是合理选择审稿人，确保审稿工作及时完成。在审稿评价不一致，或作者认为评价不合理时进行仲裁，并根据审稿结果决定是否接收论文 贡献 贡献是评判论文的主要标准。从广义上讲，如果一篇论文具有原创性和有效性，那么它就是一篇有贡献的论文。在评估一项贡献的重要性时，考虑其效果和影响。即论文发表并被广泛阅读后，会带来多大的变化。 原创性，指有趣或重要的想法，比对现有工作的增量更有价值。有效性，指论文观点的合理程度。 在算法领域，使用理论和数学分析是公认手段。因为计算机技术是短暂的，但理论成果却是永恒的。无论是理论还是实验，对有效性的证明都应该是严谨的。与现有工作的比较是证明有效性的重要部分。 评估 以下问题： 贡献是否及时，还是只具有历史意义？ 主题是否与刊物的典型读者群相关 还缺少什么？怎样才能使演示更加完整？是否有不必要的材料？ 可能的读者群有多广泛 论文能否被理解？写得清楚吗？表述是否恰当？ 内容长度是否合理 从参考书目中可以看出论文的质量。只有几篇参考文献可能是学术水平低下的证据（少数例外），如果只有几篇参考文献是近期的，那么作者似乎对其他研究并不熟悉 审稿人应努力寻找不影响作品质量但应在印刷前纠正的错误 如果下标混淆或符号不断变换大小写，很可能是作者没有足够仔细检查。拒绝该论文并希望作者再次审查，这可能是合理的 Week4 假说 无论在哪个领域，如果希望取得可靠的研究成果，就必须有一个假设，应具体、准确 调查很可能是出于主观原因进行的，但研究的最终报告，必须是客观的 假设必须是可检验的。假设的范围应限制在可以进行探索的领域内，且应该能够被证伪 实验的意义在于巩固，然后用它们来预测未来。在初步测试之后，可能有必要重新定义假设。科学进步的大部分过程，都可以被视为重新定义和发展假设，以适应新的观察结果。 假说不应该跟着实验走。实验只是提供了观察结果，只有当它能够成功预测时，才能被视为得到证实。先假设，后检验。（ \u0026ldquo;A在X数据上有效 \u0026ldquo;属于观察结果， \u0026ldquo;预测A可在任何此类数据上有效，且该预测已在X数据上得到证实 \u0026ldquo;属于经过验证的假设） 为假说辩护 优秀论文 = 一个准确、有趣的假设 + 对假设的检验、证据的展示。 在提出假设时，需要构建一个与证据相关的论点 可以通过考虑假设的效果来初步检验假设，即研究是否有简单的论据支持保留或放弃假设。 证据形式 论文可视为证据和支持性解释的集合体。广义上讲，有四种证据可以用来支持假设： 证明，对假设正确（或错误）的正式论证 建模，对假设的数学描述 模拟，通常是假设的简化形式的实施。优势是可以平滑调整参数，能够观察各种输入。然而，模拟存在不切实际或简单化的风险，其特性意味着观察到的结果不会在实践中出现。因此，最终还需要与现实进行验证。 实验，对假设的全面检验，以真实数据为基础。理想情况下，实验应根据模型的预测来进行，从而得出一些预期的行为。理论家根据已知的观察结果建立现象模型；实验家则通过新的实验寻求证实。 证据使用 在选择使用证明、模型、模拟或实验作为证据时，要考虑每种证据对读者的说服力。 测量方法 实验的目的是测量可用作证据的数据 一个强有力的研究计划，部分取决于对定性目标与该目标的不同定量近似值之间区别的认识。 科学的好与坏 完全由建议和推测组成，完全没有认真尝试评估的研究可能更难得到尊重。 如果用于描述工作的术语过于复杂，工作质量就可能不明确。 伪科学的定义是，利用科学的语言和可敬性，为并非基于符合科学标准的证据的言论赢得可信度。 研究反思 Week5 Week6 ","title":"科学技術表現メモ"},{"content":"全般 不正三角不正发生的三要素\n動機・プレッシャー：自身的欲望 機会：有机可乘的环境 正当化：心情上给自己找理由 公開鍵暗号方式（假设发给A）谁都可以用A的公开键进行上锁，然后A用自己的私钥进行解锁\n管理 情報セキュリティ事象可能性，未知的状况\n→情報セキュリティインシデント不被期望的事象，大概率会威胁安全\n対策 SPF（sender policy framework）接收邮件的时候，验证对面是不是正规的\nFTP（file transfer protocol）传文件，21/TCP\nNTP (network time protocol)时间同步，123/UDP\nSMPT电子邮件転送用，端口25/TCP\nPOP电子邮件受信用，端口110/TCP\n関連法規 特定個人情報ファイル作成有范围限制，只能用于以下：\n安全备份 源泉徴収票 保险相关（健康保险・年金保险） 支払調書 個人番号の「税・社会保障・災害対策」分野 特定電子メール法　迷惑メール：广告目的，未经许可\nその他 Webシステム評価指標\n応答時間（レスポンスタイム）：処理要求→最初の結果出力　ターンアラウンドタイム：処理要求→最後の結果出力 デジタルディバイド（digital divide）情報格差，指是否懂技术的人的格差\nハイブリッド暗号　使用公开键暗号方式，对共通键进行加密，配送　→　安全，且低负荷 之后，都用这个共通键进行通信 被采用于TLS, S/MIME　攻撃方式　パスワードリスト：撞库。这里的list指从别的地方得到的用户名和密码的list 辞書：赌有人拿单纯的单词当作密码，那词典进行暴力尝试 ブルートフォース（総当たり）：定一个密码，枚举id リバースブルートフォース（逆総当たり）：定一个id，枚举密码 企业目标顺序\nKGIの設定：key goal，重要目标达成指标 CSFの抽出：重要成功要因，即需要重点投放资源的地方 KPIの設定：重要业绩评价指标 MBO（目标管理制度）自己设定业务目标，自主管理\nwanna cryptor利用SMBv1（用于微软的文件分享通信）的脆弱性\n","permalink":"https://www.tinclouds.com/posts/e0ba9519/","summary":"全般 不正三角不正发生的三要素\n動機・プレッシャー：自身的欲望 機会：有机可乘的环境 正当化：心情上给自己找理由 公開鍵暗号方式（假设发给A）谁都可以用A的公开键进行上锁，然后A用自己的私钥进行解锁\n管理 情報セキュリティ事象可能性，未知的状况\n→情報セキュリティインシデント不被期望的事象，大概率会威胁安全\n対策 SPF（sender policy framework）接收邮件的时候，验证对面是不是正规的\nFTP（file transfer protocol）传文件，21/TCP\nNTP (network time protocol)时间同步，123/UDP\nSMPT电子邮件転送用，端口25/TCP\nPOP电子邮件受信用，端口110/TCP\n関連法規 特定個人情報ファイル作成有范围限制，只能用于以下：\n安全备份 源泉徴収票 保险相关（健康保险・年金保险） 支払調書 個人番号の「税・社会保障・災害対策」分野 特定電子メール法　迷惑メール：广告目的，未经许可\nその他 Webシステム評価指標\n応答時間（レスポンスタイム）：処理要求→最初の結果出力　ターンアラウンドタイム：処理要求→最後の結果出力 デジタルディバイド（digital divide）情報格差，指是否懂技术的人的格差\nハイブリッド暗号　使用公开键暗号方式，对共通键进行加密，配送　→　安全，且低负荷 之后，都用这个共通键进行通信 被采用于TLS, S/MIME　攻撃方式　パスワードリスト：撞库。这里的list指从别的地方得到的用户名和密码的list 辞書：赌有人拿单纯的单词当作密码，那词典进行暴力尝试 ブルートフォース（総当たり）：定一个密码，枚举id リバースブルートフォース（逆総当たり）：定一个id，枚举密码 企业目标顺序\nKGIの設定：key goal，重要目标达成指标 CSFの抽出：重要成功要因，即需要重点投放资源的地方 KPIの設定：重要业绩评价指标 MBO（目标管理制度）自己设定业务目标，自主管理\nwanna cryptor利用SMBv1（用于微软的文件分享通信）的脆弱性","title":"情报安全管理备考"},{"content":"因为之前跟风给自己弄了一个域名邮箱，既然都有域名了，就还是搞一下吧。\nDNS设置 本身在搞icloud域名邮箱的时候，就已经添加了好几条了。但都是关于邮件收发的，大概是不冲突的（？\nCNAME： 名称www，内容为user.github.io 根据github文档，至少得添加一些A记录，选@就行： 185.199.108.153 185.199.109.153 185.199.110.153 185.199.111.153 代理不用选，直接github也可以给https\nGithub Pages设置 改博客的config文件，将baseURL改为\u0026quot;https://www.example.com/\u0026quot;\n在static文件夹里创建CNAME，里面写上www.example.com\n因为是用git action进行更新的，每次push都会重新生成，所以要放在static，保证它不会每次都被影响。因为在上面dns我是设了www，所以感觉这里还是写www吧\npush之后，到github pages的setting - pages，将Enforce HTTPS打勾\n永久链接 以此为契机，也重新把url设置了一下\n博客config文件里加上permalinks（和params同级）\npermalinks: posts: \u0026#34;/posts/:slug/\u0026#34; 而关于slug，则参考Hugo博客永久链接 · 整点内啡肽 (happytoo.cyou)进行了设置\nslug: {{ substr (md5 (printf \u0026#34;%s%s\u0026#34; .Date (replace .TranslationBaseName \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title))) 4 8 }} ","permalink":"https://www.tinclouds.com/posts/b4681c17/","summary":"因为之前跟风给自己弄了一个域名邮箱，既然都有域名了，就还是搞一下吧。\nDNS设置 本身在搞icloud域名邮箱的时候，就已经添加了好几条了。但都是关于邮件收发的，大概是不冲突的（？\nCNAME： 名称www，内容为user.github.io 根据github文档，至少得添加一些A记录，选@就行： 185.199.108.153 185.199.109.153 185.199.110.153 185.199.111.153 代理不用选，直接github也可以给https\nGithub Pages设置 改博客的config文件，将baseURL改为\u0026quot;https://www.example.com/\u0026quot;\n在static文件夹里创建CNAME，里面写上www.example.com\n因为是用git action进行更新的，每次push都会重新生成，所以要放在static，保证它不会每次都被影响。因为在上面dns我是设了www，所以感觉这里还是写www吧\npush之后，到github pages的setting - pages，将Enforce HTTPS打勾\n永久链接 以此为契机，也重新把url设置了一下\n博客config文件里加上permalinks（和params同级）\npermalinks: posts: \u0026#34;/posts/:slug/\u0026#34; 而关于slug，则参考Hugo博客永久链接 · 整点内啡肽 (happytoo.cyou)进行了设置\nslug: {{ substr (md5 (printf \u0026#34;%s%s\u0026#34; .Date (replace .TranslationBaseName \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title))) 4 8 }} ","title":"给博客添加自定义域名"},{"content":"テクノロジ系 基礎理論 音频压缩计算\n例题，周波数10kHz，ビット数16ビットで4秒間サンプリング，圧縮率1／4のADPCMを用いて圧縮した場合，データ量は20kバイト $$ 16bit \\rightarrow 2byte\\\\ 10k \\times2 \\times4 \\times \\frac{1}{4} = 20k $$\nアナログ信号 → デジタル信号：標本化（在一定时间间隔下进行测定）→量子化（将数值近似为整数）→符号化（整数转为2进制）\n送信誤り検出方式\nCRC方式(Cyclic Redundancy Check)： 巡回冗長検査，使用「生成多項式」进行检查 ハミング符号方式： 使用「検査ビット」 パリティチェック方式： 使用「パリティビット」，有垂直和水平两种方向 事先声明这一串数据有奇数/偶数个1，所以但凡偶数次错误，就抵消，查不出来 两方向一起用，「垂直水平パリティ」，可查出2bit的错误，还能改1bit的 制御\nシーケンス制御： 按照事先定好的顺序 フィードバック制御： 根据当前和目标的差异，进行控制 フィードフォワード制御： 先探查出外界的变化，抢先出手抵消 ハフマン符号化为提高压缩效率，出现频率越高的数据，用最短的符号表示。所有的符号都必须不与其他撞车，如：已有一个「01」，那就不能设「010」了，因为开头俩数字会让人不清楚是哪一个\nコンピュータ構成要素 CPU書き込む方式\nライトスルー(write through)，同时写入cache和主存。可保持一贯性，但速度慢 ライトバック(write back)，只写cache，丢掉时才写进主存。更复杂，但快 割込み(Interrupt)：暂停当前进程，优先处理\n内部割込み: 原因为执行中的程序（プログラム割込み，SVC割込み, ページフォールト） 外部割り込み:（タイマ割込み，コンソール割込み，入出力割込み，機械チェック割込み） MIPS(million instructions per second) CPU性能指标，1秒能执行 “x百万” 个命令\nデイジーチェーン接続「PC－周辺機器－周辺機器」，以pc为起点的串联\nパイプライン制御将命令分割为数个stage，进行阶梯排列运行，节省时间，\n$时间=(命令数+每个命令的stage数-1)\\times 每个stage的执行时间$\nシステム構成要素 予備系システム\nホットスタンバイ（即時復旧・高速復旧），一直在旁边一起同步热身，直接切换 ウォームスタンバイ（中間的復旧），开机待机了，但没有开系统 コールドスタンバイ（段階的復旧），只准备了场所，到时候搬器材过去重开 RAID：复数的HDD作为一个来使用\nRAID 0 （ストライピング） 分散写入多个硬盘，并列处理，高速化 RAID 1 （ミラーリング） 每个硬盘写入同样的data，信赖性提升，但效率减半 RAID 2 （基础：0） 读写单位bit，用ハミング符号订正 RAID 3 读写单位bit/byte，用パリティビット订正 RAID 4 （和3类似） 读写单位block RAID 5 读写单位block，パリティ（连订正用的也分散装了） システムの処理能力向上方法\nスケールアップ： 换更高级的配置，适用于 要频繁更新处理的 难以分散并列处理的系统 スケールアウト： 增加服务器的台数，适用于 不怎么考虑整合性 可以独立分散处理的系统 クラウドサービス\nSaaS (Software as a Service)： 提供「アプリケーション以下」 PaaS (Platform as a Service)： 提供「開発環境などのミドルウェア以下」 IaaS (Infrastructure as a Service)： 提供「OS以下」或「ハードウェアおよびネットワーク」，其他的用户自己准备 系统类别\n並列処理システム： 两系统并列处理，提升性能 負荷分散システム： 分散处理 デュアルシステム： 一个处理，由两个系统独立进行，然后对比结果 デュプレックスシステム： 一个作为待机，现役的故障后再顶上 システム開発技術 エラー埋込法\n$\\frac{被发现的故意error数}{故意设计的error数} = \\frac{被发现的真error数}{真error总数} $\n結合テスト\nスタブ： 代替未完成的下位模块（トップダウンテスト） ドライバ： 代替未完成的上位模块（ボトムアップテスト） ジュール結合\n越往下，越是「强结合，低独立性」 データ結合 单一data スタンプ結合 数据结构 制御結合 模块的内部函数由外部条件决定分歧 外部結合 单一的global data 共通結合 复数的global data 内容結合 两模块内部直接互相参照分析 レビュー技法\nインスペクション(Inspection)：モデレーター负责主持，大家有明确的角色，根据check list进行，留下正式的记录 ウォークスルー： 包括作者的复数关系者参加会议，作者进行说明，其他人进行提问 ラウンドロビン： 按顺序轮流成为主持人和评论员 パスアラウンド： 将作品分发给各位评论员，各自给出意见 セキュリティ サイバーセキュリティ経営ガイドライン： 面对服务器攻击，企业的三原则\n领导要主动推进安全投资，因为这个不赚钱 还得关照供应链中的商业伙伴，不能只顾自己公司的安全 安全对策的相关，平时就要积极和关系者沟通。 AES-256: 使用256位密钥进行加密和解密。在ブルートフォース攻撃（暴力法）之下，最多要试$2^{256}$次，平均要试$2^{255}$次\nRSA原理：非常大的数很难进行素因数分解\n黑密码的方法\n辞書攻撃，使用常用语列表，逐一尝试 スニッフィング，窃听数据包 ブルートフォース攻撃，暴力法 攻击方式\nディレクトリトラバーサル攻撃： 根据文件路径，乱改乱窜 SQLインジェクション： 用sql命令攻击 XSS(クロスサイトスクリプティング)： 在html界面用恶意脚本，获取信息 セッションハイジャック： 窃取セッションID，装作用户本人 バッファオーバーフロー攻撃： 瞄着data操作的上限或下限，使程序异常 DoS攻撃： 对网站发送大量包，使其瘫痪 デジタル署名：\u0026ldquo;发件人私钥 \u0026ldquo;用于生成数字签名， \u0026ldquo;发件人公钥 \u0026ldquo;用于接收端的验证。接收端可以知道两点 → 发起者是否合法，文件是否被篡改（不能锁定被改的具体位置）\nWAF(Web Application Firewall)：Webアプリケーションに対する攻撃を検知し、遮断する\nルートキット(rootkit)：一类工具。留后门，隐藏入侵痕迹\nDNSキャッシュポイズニング伪造dns应答，用于邮件，诱导至假网站\n情報セキュリティ\n信頼性(Reliability)，期待した処理が確実に行われている 真正性(Authenticity)，主張のとおり本物である 完全性（Integrity，情報が完全で、改ざん・破壊されていない特性 可用性(Availability)，必要なときに使用が可能，評価指標「MTBFや稼働率」 機密性(Confidentiality)，認可されていない方に対して，情報を使用させず，開示しない　C\u0026amp;Cサーバ用于统一管理命令肉机（botnet）\nチャレンジレスポンス認証方式将输入的密码和从服务器得到的随机数据（チャレンジ）进行计算，再把结果传过去，进行验证\nファジング(fuzzing)向软件发送大量「fuzz（可能会出问题的data）」，以此验证脆弱性\n不正のトライアングル\n動機・プレッシャー： 想要犯事的心情 機会： 有机可乘的环境 正当化： 给自己找理由 メッセージ認証符号(Message Authentication Code：MAC)，固定長のコード(メッセージダイジェスト)，用于验证data是否被改\nネットワーク CGICommon Gateway Interface，一种仕組み，用于连接web服务器和外部程序，构建动态web页面，一般用PHP或Perl\nDHCP(Dynamic Host Configuration Protocol)は、TCP/IP中，自动分配ip的协议，IP資源の有効活用\nNAPT(IPマスカレード)1个グローバルIP，复数PC可以使用\nTCP ランスポート層の伝送制御プロトコル， 信頼性重視\nUDPランスポート層，通信効率、リアルタイム性重視\nCSMA/CD方式有线网络传输中的防撞车机制。路上有人我就不出门了啊，如果撞了就暂停之后再重发\nARP(Address Resolution Protocol)一种协议，根据ip获得对应机器的mac地址\nメール\nSMTP： 接发邮件的协议，用的是ASCII，只能英文。端口25 SMTP-AUTH： 在发件方的mail服务器，验证发件人　POP： 收件用的协议 MIME： 扩张了，不仅可日语，还能图片音频 S/MIME： 加了暗号化+电子署名 OSI基本参照モデル\n不同LAN之间的机器 4.transport层 以上 ゲートウェイ（不同协议lan之间传送数据） 3.network层 レイヤ3スイッチ，ルーター（根据パケットのIPアドレス） 2.datalink层 レイヤ2スイッチ，ブリッジ（根据パケットのMACアドレス） 1.物理层 メディアコンバータ（信号变换），リピータハブ（中继） データベース ロック粒度：锁定的单位，粒度越小，越不塞 → 增强并行性\nSQL语句\n直積，普通的全都要，普通的$SELECT * FROM R，S$ EXCEPT，差集合，R-S UNION，$R \\cup S$ INTERSECT，$R \\cap S$ GRANT，赋予权限，REVOKE为取消 ALTER USER，设密码 データ型\nキーバリューストア(KVS)：data存储类型，键值对应。结构简单，速度快，用于处理大数据 グラフ型：用（点，关系，属性）表示 ドキュメント指向：用XML，JSON等存储 関係データベース：基于集合论，用table存储 ロールバック使用更新前log进行回滚\n2相コミット在分散DB中，先确认大家是否可以更新，都同意了再进行更新处理\nアルゴリズムとプログラミング 2分探索法中央值和目的值进行比较，将搜索范围缩小一半\nXML相关xml宣言内指定version，文字code； DTD(Document Type Definition)指定文書構造の定義\nJava系（Web環境での動的処理）\nJavaScript： HTML内に記述されるスクリプト言語です。ブラウザ上で実行されます Javaアプレット： data处理位于 ブラウザ（Webクライアント側） Javaサーブレット： data处理位于 Webサーバ VBScript： 两边都可 プログラムの性質\nリエントラント(再入可能)，复数任务共有执行 リカーシブ(再帰)，可递归，自己调用自己 リユーザーブル(逐次再使用可能)，执行一次后，不用重新加载也可以再次执行 リロケータブル(再配置可能)，放在主存的任意位置都可正常运行 ソフトウェア LRU(Least Recently Used)将最早参照的page作为置换对象\nLFU(Least Frequently Used)按单位时间内的参照频度\nHadoop用于大数据的分散处理，Hadoop = HDFS(分散文件系统) + MapReduce(分散处理技术框架)\nディスパッチ在タスク管理中，对即将执行的任务进行CPU使用权的分配\nハードウェア アクチュエータ(Actuator)将電気信号 转为 力学运动\nメモリ\nRAM （挥发性） DRAM （需refresh）\u0026ndash;› SDRAM 主存 SRAM （不需refresh）cache，和clock同步 ROM （不挥发性） マスクROM （只读） PROM （可写） EPROM 用紫外线消除data EEROM 用电气消除data \u0026ndash;› Flash Memory SSD，USB メモリセルメモリ的最小单位（放0和1）\nコンデンサ：用于主存（DRAM），可存储电气的电子部品 フリップフロップ回路：用于cache（SRAM），顺序回路（根据过去的输入进行输出） エンディアン将byte单位的数据记入内存的顺序，分为以下两种（数据：12 34 56 78）\nリトルエンディアン： [78 56 34 12]，电脑更好处理 ビッグエンディアン： [12 34 56 78]，人更易读 PWM(Pulse Width Modulation)纵轴幅度一致，通过改宽度进行控制\nソフトウェア開発管理技術 リファクタリング(Refactoring)重构，指只改内部，外部看起来不变。提高保守性\nテスト駆動開発为了迅速开发，先设定测试\nプロトタイピング在早期完成试作品，得到用户反馈\nリバースエンジニアリング对软件进行分析，反向推测出它的设计图、代码\nフォワードエンジニアリング抄了别人的之后，进行更改，作为新的东西\nコンカレントエンジニアリング开发期间，数个环节同时并行，缩短总时间\nソーシャルエンジニアリング从人类角度偷得情报（如：打电话问出密码）\n情報メディア SR(Substitutional Reality)代替現実。看过去的视频，感觉回到了那个时候的那个地方\nAR(Augmented Reality)拡張現実。眼前的现实+合成，进行扩张\nVR(Virtual Reality)仮想現実。用CG代替现实\nユーザーインタフェース ニモニックコード(Mnemonic Code)表意コード，易于联想，比如：日本→JP，プロジェクトマネージャ→PM\nシーケンスコード順番コード，0001→0002→0003→…→9999\nデシマルコード10進コード，递归分为0～9的10个组，进行分类。例如图书code\nブロックコード区分コード，定好范围，如：営業部は1000～1999、企画部は2000～2999\nマネジメント系 プロジェクトマネジメント WBS(Work Breakdown Structure)：对各个阶段的目标进行细分化\n品質評価\n保守性，修正のしやすさ トレンドチャート两根折线（实绩+预定），表示 進捗状況+预算消費状況\nサービスマネジメント SPD(Surge Protective Device，サージ防護機器)：過電圧の被害から機器を防御する\nエラープルーフ化为减少人为错误，对（机器，方法）等「人外因素」进行改善\nバックアップ总之不能随便删。对于分散存储的数据，要等大家都处理完毕了再进行备份，最好在复数媒体上备份\nインシデント管理incident（事故），目标是将瘫痪时间最小化\nシステム障害処理\nウォームスタート： 不关电源，直接重开程序再来一次 コールドスタート： 关了电源，完全重来 エスカレーション段階的取扱い，第一个客服能力不够，叫了第二个客服来解决专业问题，自己只负责和客户沟通\nサービスデスクの組織構造\nローカルサービスデスク： 在近处设置，容易派遣 中央サービスデスク： 将一个地方作为据点，可降低运营成本，易于管理 バーチャルサービスデスク： 各地分散，但互相连携 フォロー･ザ･サン： 在世界各个地域设置据点，统筹管理，24小时都有人上班 SLA(Service Level Agreement)对于服务的目标品质，提供方和客户达成的统一意见\nベンチマーキング将自己的东西与外面的进行比较分析，进行评价\nPDCAPlan(計画)→Do(実行)→Check(評価)→Act(見直し・改善)\nシステム監査 コントロールトータルチェック对比检查「发送时的总数」和「接收时的总数」　内部統制企业内部的流程，最终责任者为经营者\nストラテジ系 経営戦略マネジメント バランススコアカード(Balanced Score Card、BSC)：从4个角度来评价业绩（设立指标）\n财务角度，怎样满足股东等的期待 客户角度，设定对客户的行动指标 内部业务流程角度，各种xx率 学习成长角度，怎样才能成长 コストプラス法设定价格时，在成本基础上，加上利益。製品価格＝直接費＋間接費＋利益\n业务流程用语\nMBO（Management by Objectives）： 设立目标，自主管理 KGI（Key Goal Indicator）： 重要目標達成指標 CSF（Critical Success Factor）： 重要成功要因，指要重点投入资源的地方 KPI（Key Performance Indicator）： 重要業績評価指標 アンゾフの成長マトリクス\n既存制品 新规制品 既存市场 市场浸透 制品开发 新规市场 市场开拓 多角化 M\u0026amp;A(Mergers and Acquisitions)把别人家买了，他社资源变成我的资源\n合并类型\n垂直統合型： 买了同一供应链中的其他公司 水平統合型： 同行业的其他公司 混合型： 买了完全不同类型的公司 コアコンピタンス(core competence)核心技术，别人没有的\n技術戦略マネジメント コモディティ化汎用品化，指大家的产品都差不多，除了降价没有别的竞争方法，最终导致大家的收益降低\nTLO(Technology Licensing Organization)技術移転機関。大学的研究成果申请专利，转让技术给民间企业　クラウドファンディング(Crowdfunding)众筹\nビジネスインダストリ EDI(Electronic Data Interchange)：一种规约，用于不同设备经过通信回线进行交易。可分为4个方面\n情报传达，网络选择，传送方法等 情报表现，保证这个数据每个电脑都能看懂 业务运用，业务及系统的运用层次的东西 取引基本，花钱收货相关的法律有效性 HEMS(Home Energy Management System，ヘムス)：将家庭电器用网络连接，通过可视化能量消费等，达到节能效果\nRFID(Radio Frequency IDentifier)：使用RFタグ(ICタグ)，在数cm～数m距离。汚れに強く，記録された情報を梱包の外から読むことができる\nエスクローサービス网购中的第三方中介。先付款给中介，收货后，中介给店家打钱\nSEO(Search Engine Optimization)为了排在搜索引擎的前面，对网站进行各种优化\nIoT(Internet of Things)将「物品」连上网，进行情报通信\nCGM(Consumer Generated Media)消费者个人制作的media，如：ブログ、SNS、口コミサイト、Q\u0026amp;Aコミュニティ、写真共有サイト、動画共有サイト\nOtoO(Online to Offline)线上和线下互相促进，比如诱导顾客移动到线上或线下\n法務 集団思考(グループシンク)：在团队具有高度凝聚力、存在封闭系统等缺陷以及团队压力较大的情况下，做出了非理性决定\n刑法\nコンピュータやデータを破壊する DoS攻撃によるサービス妨害 メールボムによるメールサーバ妨害 Webページの改ざん 電子署名法与手写签名以及盖章有同等的效应\nシステム戦略 NPV法(Net Present Value)正味現在価値法，判断是否要投资$NPV（正味現在価値） ＝ PV（現在価値） － 投資額$\n设一个割引率，对投资进行评价。假设进行投资，割引率为5%，1年后拿到的100的价值为「$100/1.05$」，2年后的为「$100/1.05/1.05$」，即拖得越久越不值钱\nSOA(Service Oriented Architecture：サービス指向アーキテクチャ)，一种设计方式，将系统以「service」为单位进行分割组装\nROI(Return On Investment)投資利益率，$ROI = \\frac{\\text{利益}}{\\text{投资额}} \\times 100$\nデジタルディバイド(Digital Divide)一种现象，指由于情報格差，导致社会 贫富方面的差距\nEVA（Economic Value Added）経済的付加価値\nIRR（Internal Rate of Return）内部収益率\nホスティングサービス(Hosting Service)服务器租赁，用户不需要维持管理　オンデマンド(On-Demand)根据用户需求而提供的服务\nRPA(Robotic Process Automation)「定型的なパソコン操作」用软件进行自动化\nシステム企画 アカウントアグリゲーション(aggregation)所有银行口座情报集合在一起表示的一种サービス\nCSR(Corporate Social Responsibility)企业社会责任，如自然环境，人权等方面\nファブレス(fabless)没有工厂的制造业企业，自己进行设计开发，但委托别人生产制造\nグリーン購入优先选择更环境友好的企业及其商品，进行购买\n企業活動 連関図法：为了搞清楚「复杂因素」之中的东西，将事件的「因果关系」表达出来\n親和図法：将情报「グループ化」，明确问题所在\n系統図法：按顺序展开各类手段方针，追求最佳方法\nPDPC法：假定问题，讨论对应方法\nOC曲線(検査特性曲線: Operating Characteristic curve)：ロットの不良率とそのロットの合格率の関係を表したもの\n利益计算\n売上総利益 ＝ 売上高 － 売上原価 営業利益 ＝ 売上総利益 － 販売費及び一般管理費 経常利益 = 営業利益 + 営業外収益 - 営業外費用 貸借対照表分为以下三部分，且算出各自所占比率\n資産： 流动资产(赚钱) + 固定资产（投资等） 負債： 流动负债 + 固定负债 純資産： 资本金 + 利益剰余金 CIOChief Information Officer，最高情報責任者\nCEOChief Executive Officer，最高経営責任者\nCFOChief Financial Officer，最高財務責任者\nCTOChief Technology Officer，最高技術責任者\n","permalink":"https://www.tinclouds.com/posts/6d5318e4/","summary":"テクノロジ系 基礎理論 音频压缩计算\n例题，周波数10kHz，ビット数16ビットで4秒間サンプリング，圧縮率1／4のADPCMを用いて圧縮した場合，データ量は20kバイト $$ 16bit \\rightarrow 2byte\\\\ 10k \\times2 \\times4 \\times \\frac{1}{4} = 20k $$\nアナログ信号 → デジタル信号：標本化（在一定时间间隔下进行测定）→量子化（将数值近似为整数）→符号化（整数转为2进制）\n送信誤り検出方式\nCRC方式(Cyclic Redundancy Check)： 巡回冗長検査，使用「生成多項式」进行检查 ハミング符号方式： 使用「検査ビット」 パリティチェック方式： 使用「パリティビット」，有垂直和水平两种方向 事先声明这一串数据有奇数/偶数个1，所以但凡偶数次错误，就抵消，查不出来 两方向一起用，「垂直水平パリティ」，可查出2bit的错误，还能改1bit的 制御\nシーケンス制御： 按照事先定好的顺序 フィードバック制御： 根据当前和目标的差异，进行控制 フィードフォワード制御： 先探查出外界的变化，抢先出手抵消 ハフマン符号化为提高压缩效率，出现频率越高的数据，用最短的符号表示。所有的符号都必须不与其他撞车，如：已有一个「01」，那就不能设「010」了，因为开头俩数字会让人不清楚是哪一个\nコンピュータ構成要素 CPU書き込む方式\nライトスルー(write through)，同时写入cache和主存。可保持一贯性，但速度慢 ライトバック(write back)，只写cache，丢掉时才写进主存。更复杂，但快 割込み(Interrupt)：暂停当前进程，优先处理\n内部割込み: 原因为执行中的程序（プログラム割込み，SVC割込み, ページフォールト） 外部割り込み:（タイマ割込み，コンソール割込み，入出力割込み，機械チェック割込み） MIPS(million instructions per second) CPU性能指标，1秒能执行 “x百万” 个命令\nデイジーチェーン接続「PC－周辺機器－周辺機器」，以pc为起点的串联\nパイプライン制御将命令分割为数个stage，进行阶梯排列运行，节省时间，\n$时间=(命令数+每个命令的stage数-1)\\times 每个stage的执行时间$\nシステム構成要素 予備系システム\nホットスタンバイ（即時復旧・高速復旧），一直在旁边一起同步热身，直接切换 ウォームスタンバイ（中間的復旧），开机待机了，但没有开系统 コールドスタンバイ（段階的復旧），只准备了场所，到时候搬器材过去重开 RAID：复数的HDD作为一个来使用\nRAID 0 （ストライピング） 分散写入多个硬盘，并列处理，高速化 RAID 1 （ミラーリング） 每个硬盘写入同样的data，信赖性提升，但效率减半 RAID 2 （基础：0） 读写单位bit，用ハミング符号订正 RAID 3 读写单位bit/byte，用パリティビット订正 RAID 4 （和3类似） 读写单位block RAID 5 读写单位block，パリティ（连订正用的也分散装了） システムの処理能力向上方法","title":"基本情报刷题记录"},{"content":"stack stack = [ ]，进栈.append(data)，出栈.pop()，取顶stack[-1]\n# 括号匹配问题，注意if的顺序的范围，及时return for char in string: if char in {\u0026#39;(\u0026#39;, \u0026#39;[\u0026#39;, \u0026#39;{\u0026#39;}: stack.push(char) elif char in {\u0026#39;)\u0026#39;, \u0026#39;]\u0026#39;, \u0026#39;}\u0026#39;} and len(stack.stack) \u0026gt; 0: if stack.gettop() == check_dict[char]: stack.pop() else: return False if len(stack.stack) == 0: return True else: return False heap 一般用于堆排序，优先队列。对于最小堆，每个点都小于或等于其子节点。\n# 创建最小堆 heapq.heapify(list) # 如果堆的大小小于k，直接添加元素 # 否则，如果新元素大于堆顶元素，先弹出堆顶，再添加新元素 # 这样可以确保堆中始终是最大的k个元素 if len(self.heap) \u0026lt; self.k: heapq.heappush(self.heap, val) elif val \u0026gt; self.heap[0]: heapq.heappushpop(self.heap, val) # 堆顶元素是第k大的元素 return self.heap[0] ","permalink":"https://www.tinclouds.com/posts/306fd6ea/","summary":"stack stack = [ ]，进栈.append(data)，出栈.pop()，取顶stack[-1]\n# 括号匹配问题，注意if的顺序的范围，及时return for char in string: if char in {\u0026#39;(\u0026#39;, \u0026#39;[\u0026#39;, \u0026#39;{\u0026#39;}: stack.push(char) elif char in {\u0026#39;)\u0026#39;, \u0026#39;]\u0026#39;, \u0026#39;}\u0026#39;} and len(stack.stack) \u0026gt; 0: if stack.gettop() == check_dict[char]: stack.pop() else: return False if len(stack.stack) == 0: return True else: return False heap 一般用于堆排序，优先队列。对于最小堆，每个点都小于或等于其子节点。\n# 创建最小堆 heapq.heapify(list) # 如果堆的大小小于k，直接添加元素 # 否则，如果新元素大于堆顶元素，先弹出堆顶，再添加新元素 # 这样可以确保堆中始终是最大的k个元素 if len(self.heap) \u0026lt; self.k: heapq.heappush(self.heap, val) elif val \u0026gt; self.heap[0]: heapq.heappushpop(self.heap, val) # 堆顶元素是第k大的元素 return self.","title":"面试算法抱佛脚-栈/堆/哈希"},{"content":"重度拖延症开始准备coding test了，也不知道到底需要多少。\n如果不报line，应该easy就行了吧？\n快慢指针 (环问题) 指fast一定能追上slow，通常设fast步长为2，slow为1\nclass Solution: def hasCycle(self, head: ListNode) -\u0026gt; bool: # 空链表或链表只有一个节点，无环 if not head or head.next == None: return False # 初始化快慢指针 fast = slow = head # 如果不存在环，肯定 fast 先指向 null # 细节：fast 每次走 2 步，所以要确定 fast 和 fast.next 不为空，不然会报执行出错。 while fast and fast.next: # 快指针移动 2 步，慢指针移动 1 步 fast = fast.next.next slow = slow.next # 快慢指针相遇，有环 if fast == slow: return True return False 两帧相遇在环的中途，（设：head到环起点为x，到环中途为y，绕回环起点为z）\n相遇时，slow走过x+y，fast则走了x+y+z+y，\n且根据fast = 2slow，可解得x = z\n因此，若此时再安排一个slow2从head出发，两个slow正好能在环起点相遇，便可以return出环起点的位置\nslow = fast = head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: slow2 = head while slow != slow2: slow = slow.next slow2 = slow2.next return slow return None 有序列表 大概就是有序列表中的删除问题，easy的话就是基本指向next，大家都变1个，注意边界就好。\n下面这个不止要删重复的，重复的要变0个\nwhile p2 and p2.next: if p2.val == p2.next.val: # 循环，将p2指向结束重复的坐标，p1连过去，以此删去所有重复的元素 while p2.next and p2.val == p2.next.val: p2 = p2.next p1.next = p2.next else: # 各自前进一格 p1 = p1.next p2 = p2.next 进位加法 class Solution(object): def addTwoNumbers(self, l1, l2): # 创建一个虚拟头节点 dummy = ListNode(0) head = dummy up = 0 # 表示进位 # 遍历两个链表 while l1 or l2 or up: val1 = l1.val if l1 else 0 val2 = l2.val if l2 else 0 res = val1 + val2 + up # 计算进位和当前位 up = res // 10 res = res % 10 # 创建新节点并移动指针 head.next = ListNode(res) head = head.next # 移动l1和l2指针 if l1: l1 = l1.next if l2: l2 = l2.next # 返回结果链表的头节点（跳过虚拟头节点） return dummy.next ","permalink":"https://www.tinclouds.com/posts/9ffef97c/","summary":"重度拖延症开始准备coding test了，也不知道到底需要多少。\n如果不报line，应该easy就行了吧？\n快慢指针 (环问题) 指fast一定能追上slow，通常设fast步长为2，slow为1\nclass Solution: def hasCycle(self, head: ListNode) -\u0026gt; bool: # 空链表或链表只有一个节点，无环 if not head or head.next == None: return False # 初始化快慢指针 fast = slow = head # 如果不存在环，肯定 fast 先指向 null # 细节：fast 每次走 2 步，所以要确定 fast 和 fast.next 不为空，不然会报执行出错。 while fast and fast.next: # 快指针移动 2 步，慢指针移动 1 步 fast = fast.next.next slow = slow.next # 快慢指针相遇，有环 if fast == slow: return True return False 两帧相遇在环的中途，（设：head到环起点为x，到环中途为y，绕回环起点为z）","title":"面试算法抱佛脚-LinkedList"},{"content":"建库，设key 一个公共放网页，username.github.io 一个私有放全部，blog Setting - Developer setting - Personal access tokens， 创建一个 Token，选repo和workflow权限（只能看一次，记得复制） 私有库的 Settings - Secrets - Actions 添加PERSONAL_TOKEN 设置 创建blog/.github/workflows/build.yml\nname: github pages on: push: branches: - main # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: personal_token: ${{ secrets.PERSONAL_TOKEN }} external_repository: szkm330/szkm330.github.io publish_branch: main publish_dir: ./public 日常使用 # 第一次安装 git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod # 重新clone的时候 git clone git submodule update --init --recursive # 初始化更新theme子模块 git submodule update --remote --merge # 如果主题有更新 ----- # 一般使用 hugo new posts/a.md git add . git commit -m \u0026#34;\u0026#34; git push ","permalink":"https://www.tinclouds.com/posts/3f978965/","summary":"建库，设key 一个公共放网页，username.github.io 一个私有放全部，blog Setting - Developer setting - Personal access tokens， 创建一个 Token，选repo和workflow权限（只能看一次，记得复制） 私有库的 Settings - Secrets - Actions 添加PERSONAL_TOKEN 设置 创建blog/.github/workflows/build.yml\nname: github pages on: push: branches: - main # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.","title":"利用git actions进行博客上传"},{"content":"记录第一次的托福经历，我们下次托业见。\n酒店环节 比我想象的要简单一些，我还以为要交押金呢，结果直接身份证就可以了。本想到附近的711买点饭团或便当作为晚饭，再顺便买面包牛奶当第二天早餐。结果最近的那家711在广外校内，我看着那个疫情期间“校外人员不得入内”的牌子，就放弃进去了（虽然我觉得应该能进去的吧）。\n接着就是找附近的便利店、超市，但附近范围内的都是满简陋的那种小店，我不放心就还是放弃了。最后走了快二十分钟，到一个楼盘广场那边，在一个比较大规模的便利店买了面包牛奶，顺便在旁边吃了碗牛肉拉面，全程听着亭子里的大爷大妈唱卡拉OK。\n算下来，这一天一直在走路。地铁站走到酒店二十分钟，酒店到吃饭的地方又是十几分钟。一整天不知道走了多少公里（笑），但脚似乎还好，看来是专业的竞走选手了。\n考试入场 嗯\u0026hellip;我确认信上的考场号是XXXXXX-B，就是一个编号它分有AB，对应不同的教室。\n门外要先进行签到，在表上找到自己名字并签名，保安大叔就会给一张承诺书（？），总之自己打印的那张纸是不能带进去的。我排进自己编号的那个队列，并一眼在左边的表上找到了自己的姓名，LI XINYUE。立马签名，工作人员在那张承诺书上写了个字母和编号，递给了我。\n然后我去旁边存了行李，进门上楼。\n低头一看手里的纸，上面写着一个大大的“A”。\n虽然我觉得自己应该在B考试，但还是打算先按着工作人员的指示，先去了A考场。刷身份证进场的时候，老师说这个考场没有我。我就说可能是写错了吧，我在B。此时，我还以为是人家写错了而已。\n老师在电脑上一通操作，说：”有两个LI XINYUE。“\n啊这，真的有这么巧的事情吗？\n就是说，我签到的时候，其实是帮另一个在A的人签了，然后保安大哥才给我写了A？\n想到我考日语那时也走错了入口，我跟广外真的关系好差哦。\n考试过程 经过上面那一通折腾，其实心已经蛮累了。因为第一次考啥也不懂，电脑也不敢乱碰。老师按程序帮我解锁了考试程序，我也不敢按”继续“，我以为是全场统一时间开始的。谁知道是自行开始的啊！我大概慢了一两分钟吧？老师提醒我可以开始，我才发现人家已经开始了。\n首先是阅读。哪怕我在考完的现在打开百度，搜索”托福要考几篇阅读？“，搜到的也都是三篇。搜了半天，才看到是在当天库存中提取3~4篇。四篇！60分钟！而我一直照着原来20分钟一篇的速度！很刺激哦，最后一篇可以说是一目十行（笑）。\n接着是听力。还记得我慢了别人一两分钟吗？重点来了，在我还在听的时候，不少人已经站起来走动，去吃东西上厕所了。众所周知，我的座位被随机抽到了第一排。这是什么意思呢？就是每个出门的人几乎都会经过我\u0026hellip;\u0026hellip;好尴尬哦（笑）。于是我当然决定，把最后一两篇听力没怎么注意听的责任，丢给这些走来走去的人啦！\n口语。其实就是正常发挥吧，复习的时候也没有把它作为重点，也没指望拿太高的分。毕竟也是经历过广东英语高考的人，戴着耳机麦克风说话也不算太生疏。\n作文。其实体验上来说，反而比六级要好。六级作文如果刚好不认识题目的那个单词，就连怎么编口水话都编不出来。这里作文题目好歹都能看懂，就顺着简单的逻辑往下编呗。高级词汇倒是没咋用了，但最起码凑够了字数，勉强就这样吧。\n结果预测 点击提交的一瞬间，口语和阅读成绩就出来了，16、17。\n唔\u0026hellip;那一瞬间就觉得没了。\n本身复习的重点就在这两个上面，平时模拟也基本上能到22、23左右，所以我才觉得应该能80。而这俩一下少了10分，大概就是没了吧。我觉得可以马上开始购买托业资料了（笑）。\n唉，这玩意咋说呢。其实一般大学院有个60分就都可以报名了，但问题是这帮竞争对手一个个都在刷分，而且冬季考本身合格名额就少，分数多1分，合格的可能性就大一些。还是刷托业吧。\n","permalink":"https://www.tinclouds.com/posts/51640d64/","summary":"记录第一次的托福经历，我们下次托业见。\n酒店环节 比我想象的要简单一些，我还以为要交押金呢，结果直接身份证就可以了。本想到附近的711买点饭团或便当作为晚饭，再顺便买面包牛奶当第二天早餐。结果最近的那家711在广外校内，我看着那个疫情期间“校外人员不得入内”的牌子，就放弃进去了（虽然我觉得应该能进去的吧）。\n接着就是找附近的便利店、超市，但附近范围内的都是满简陋的那种小店，我不放心就还是放弃了。最后走了快二十分钟，到一个楼盘广场那边，在一个比较大规模的便利店买了面包牛奶，顺便在旁边吃了碗牛肉拉面，全程听着亭子里的大爷大妈唱卡拉OK。\n算下来，这一天一直在走路。地铁站走到酒店二十分钟，酒店到吃饭的地方又是十几分钟。一整天不知道走了多少公里（笑），但脚似乎还好，看来是专业的竞走选手了。\n考试入场 嗯\u0026hellip;我确认信上的考场号是XXXXXX-B，就是一个编号它分有AB，对应不同的教室。\n门外要先进行签到，在表上找到自己名字并签名，保安大叔就会给一张承诺书（？），总之自己打印的那张纸是不能带进去的。我排进自己编号的那个队列，并一眼在左边的表上找到了自己的姓名，LI XINYUE。立马签名，工作人员在那张承诺书上写了个字母和编号，递给了我。\n然后我去旁边存了行李，进门上楼。\n低头一看手里的纸，上面写着一个大大的“A”。\n虽然我觉得自己应该在B考试，但还是打算先按着工作人员的指示，先去了A考场。刷身份证进场的时候，老师说这个考场没有我。我就说可能是写错了吧，我在B。此时，我还以为是人家写错了而已。\n老师在电脑上一通操作，说：”有两个LI XINYUE。“\n啊这，真的有这么巧的事情吗？\n就是说，我签到的时候，其实是帮另一个在A的人签了，然后保安大哥才给我写了A？\n想到我考日语那时也走错了入口，我跟广外真的关系好差哦。\n考试过程 经过上面那一通折腾，其实心已经蛮累了。因为第一次考啥也不懂，电脑也不敢乱碰。老师按程序帮我解锁了考试程序，我也不敢按”继续“，我以为是全场统一时间开始的。谁知道是自行开始的啊！我大概慢了一两分钟吧？老师提醒我可以开始，我才发现人家已经开始了。\n首先是阅读。哪怕我在考完的现在打开百度，搜索”托福要考几篇阅读？“，搜到的也都是三篇。搜了半天，才看到是在当天库存中提取3~4篇。四篇！60分钟！而我一直照着原来20分钟一篇的速度！很刺激哦，最后一篇可以说是一目十行（笑）。\n接着是听力。还记得我慢了别人一两分钟吗？重点来了，在我还在听的时候，不少人已经站起来走动，去吃东西上厕所了。众所周知，我的座位被随机抽到了第一排。这是什么意思呢？就是每个出门的人几乎都会经过我\u0026hellip;\u0026hellip;好尴尬哦（笑）。于是我当然决定，把最后一两篇听力没怎么注意听的责任，丢给这些走来走去的人啦！\n口语。其实就是正常发挥吧，复习的时候也没有把它作为重点，也没指望拿太高的分。毕竟也是经历过广东英语高考的人，戴着耳机麦克风说话也不算太生疏。\n作文。其实体验上来说，反而比六级要好。六级作文如果刚好不认识题目的那个单词，就连怎么编口水话都编不出来。这里作文题目好歹都能看懂，就顺着简单的逻辑往下编呗。高级词汇倒是没咋用了，但最起码凑够了字数，勉强就这样吧。\n结果预测 点击提交的一瞬间，口语和阅读成绩就出来了，16、17。\n唔\u0026hellip;那一瞬间就觉得没了。\n本身复习的重点就在这两个上面，平时模拟也基本上能到22、23左右，所以我才觉得应该能80。而这俩一下少了10分，大概就是没了吧。我觉得可以马上开始购买托业资料了（笑）。\n唉，这玩意咋说呢。其实一般大学院有个60分就都可以报名了，但问题是这帮竞争对手一个个都在刷分，而且冬季考本身合格名额就少，分数多1分，合格的可能性就大一些。还是刷托业吧。","title":"记第一次托福"},{"content":"口袋48 口袋48录播扒下来的弹幕是一个lrc文件：\n[00:00:17.341]用户1\t晚上好 [00:00:29.409]用户2\t来了 [00:00:31.980]用户1\tHi 左边是该留言出现的时间点，接着是用户id，最后为留言内容。\n为了将这些文字转换为「从右到左滚动」这种大家更熟悉的形式，我写了一个小工具。\nAegisub 一款我使用频率最高的软件（笑）\n这是一个字幕编辑工具，所有做过字幕相关工作的朋友应该都很熟悉了，就是俗称“打轴”的环节。厉害的人可以玩出很多豪华的特效，但我只是用到了其中一个基础的命令，用来模拟弹幕滚动的效果。\n# 在设定的时间内，文字从(x1,y1)的位置移动到(x2,y2) \\move(\u0026lt;x1\u0026gt;,\u0026lt;y1\u0026gt;,\u0026lt;x2\u0026gt;,\u0026lt;y2\u0026gt;) LrcToAss48 项目地址\n是的，我们要做的事情很简单，就是把lrc文件中的「出现瞬间」，转换为「有始有终的持续时间」。\n假设这个弹幕要持续21秒，则在ass字幕文件中，时间格式为0:00:00.00,0:00:21.00\n具体来说，完整的一行是这样的\nDialogue: 0,0:00:00.00,0:00:21.00,Default,,0,0,0,,{\\move(1280,65,-1345,65)}晚上好 大部分代码就是在进行时间的换算，包括时分秒的进位之类的，挺无聊的，此处就省略了。\n至于具体的时间长度设定，则需要根据视频的分辨率进行调整。\nright = \u0026#39;1280\u0026#39; left = \u0026#39;-1345\u0026#39; # 弹幕停留时间 dtime = 21 # 弹幕高度池，此为30字号的默认设置 high = [65,95,125,155,185,215,245,275,305,335] # 计数用，用于高度分配 n = 0 压制 将lrc文件逐行处理完成后，我们就得到了一个ass文件。\n直接用小丸工具箱之类的压制就行了，毕竟也不是什么蓝光压制，不需要太专业。\n2024-02-06 追记\n最近换成了群友写的StarTools，显卡压制，最主要的是可以直接压emoji不会乱码了，省去了一个处理emoji的步骤。\n","permalink":"https://www.tinclouds.com/posts/8d984cb2/","summary":"口袋48 口袋48录播扒下来的弹幕是一个lrc文件：\n[00:00:17.341]用户1\t晚上好 [00:00:29.409]用户2\t来了 [00:00:31.980]用户1\tHi 左边是该留言出现的时间点，接着是用户id，最后为留言内容。\n为了将这些文字转换为「从右到左滚动」这种大家更熟悉的形式，我写了一个小工具。\nAegisub 一款我使用频率最高的软件（笑）\n这是一个字幕编辑工具，所有做过字幕相关工作的朋友应该都很熟悉了，就是俗称“打轴”的环节。厉害的人可以玩出很多豪华的特效，但我只是用到了其中一个基础的命令，用来模拟弹幕滚动的效果。\n# 在设定的时间内，文字从(x1,y1)的位置移动到(x2,y2) \\move(\u0026lt;x1\u0026gt;,\u0026lt;y1\u0026gt;,\u0026lt;x2\u0026gt;,\u0026lt;y2\u0026gt;) LrcToAss48 项目地址\n是的，我们要做的事情很简单，就是把lrc文件中的「出现瞬间」，转换为「有始有终的持续时间」。\n假设这个弹幕要持续21秒，则在ass字幕文件中，时间格式为0:00:00.00,0:00:21.00\n具体来说，完整的一行是这样的\nDialogue: 0,0:00:00.00,0:00:21.00,Default,,0,0,0,,{\\move(1280,65,-1345,65)}晚上好 大部分代码就是在进行时间的换算，包括时分秒的进位之类的，挺无聊的，此处就省略了。\n至于具体的时间长度设定，则需要根据视频的分辨率进行调整。\nright = \u0026#39;1280\u0026#39; left = \u0026#39;-1345\u0026#39; # 弹幕停留时间 dtime = 21 # 弹幕高度池，此为30字号的默认设置 high = [65,95,125,155,185,215,245,275,305,335] # 计数用，用于高度分配 n = 0 压制 将lrc文件逐行处理完成后，我们就得到了一个ass文件。\n直接用小丸工具箱之类的压制就行了，毕竟也不是什么蓝光压制，不需要太专业。\n2024-02-06 追记\n最近换成了群友写的StarTools，显卡压制，最主要的是可以直接压emoji不会乱码了，省去了一个处理emoji的步骤。","title":"LrcToAss48: 口袋48弹幕转换"},{"content":"给自己写了个小工具，用来平时每周MOR的歌词编辑。\n虽然替换换行符功能不如直接打开word，但渐变色工具还是挺方便的。\n以下是心得。\n一般的main\nif __name__ == \u0026#39;__main__\u0026#39;: QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling) app = QtWidgets.QApplication(sys.argv) mainwin = Ui_MainWindow() mainwin.show() sys.exit(app.exec_()) 如果是多窗口，要一起声明一遍，后面再用show和close进行关系调整\nlogin = Ui_Dialog_in() win = Ui_MainWindow() login.show() 因为不是写在里面的，所以self要改成自己定的窗口名字\nQtWidgets.QMessageBox.information(mainwin,'Error','出现错误', QtWidgets.QMessageBox.Ok)\n涉及特殊符号再用一个反斜杠 ，再用一个大括号\nself.changeto.setText(\u0026#34;\\\\N{\\\\fn思源黑体}\u0026#34;) c0 = \u0026#39;{{\\\\1vc({},{},{},{})}}\u0026#39;.format(c1,c2,c3,c4) 剩下的就是git了\nGitHub 远程端添加了 README.md 文件后，无法再次 push 的主要原因是 GitHub 中的README.md 文件不在本地代码目录中，需要合并同步\ngit pull --rebase origin master git push -u origin master ","permalink":"https://www.tinclouds.com/posts/0bbc04ad/","summary":"给自己写了个小工具，用来平时每周MOR的歌词编辑。\n虽然替换换行符功能不如直接打开word，但渐变色工具还是挺方便的。\n以下是心得。\n一般的main\nif __name__ == \u0026#39;__main__\u0026#39;: QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling) app = QtWidgets.QApplication(sys.argv) mainwin = Ui_MainWindow() mainwin.show() sys.exit(app.exec_()) 如果是多窗口，要一起声明一遍，后面再用show和close进行关系调整\nlogin = Ui_Dialog_in() win = Ui_MainWindow() login.show() 因为不是写在里面的，所以self要改成自己定的窗口名字\nQtWidgets.QMessageBox.information(mainwin,'Error','出现错误', QtWidgets.QMessageBox.Ok)\n涉及特殊符号再用一个反斜杠 ，再用一个大括号\nself.changeto.setText(\u0026#34;\\\\N{\\\\fn思源黑体}\u0026#34;) c0 = \u0026#39;{{\\\\1vc({},{},{},{})}}\u0026#39;.format(c1,c2,c3,c4) 剩下的就是git了\nGitHub 远程端添加了 README.md 文件后，无法再次 push 的主要原因是 GitHub 中的README.md 文件不在本地代码目录中，需要合并同步\ngit pull --rebase origin master git push -u origin master ","title":"记歌词工具"},{"content":"# 生成 ssh-keygen -t ed25519 -C “email@outlook.com” # 设置 git config --global user.name \u0026quot;user\u0026quot; git config --global user.email \u0026quot;email@outlook.com\u0026quot; git config --global init.defaultBranch main # 在文件夹下 git init # 初始化仓库 git add . # 添加该路径下所有文件 git commit -m \u0026quot;first commit\u0026quot; # 提交，m后是备注 git remote add origin https://github.com/szkm330/demo.git # 连接，仓库名origin git remote rm origin # 删除连接 git remote -v # 查看 git branch -M main # 换名 git branch -a # 查看 git push -u origin main # 上传 git pull origin main 官网摘录\n…or create a new repository on the command line\necho \u0026#34;# LrcToAss48\u0026#34; \u0026gt;\u0026gt; README.md git init git add README.md git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin https://github.com/szkm330/LrcToAss48.git git push -u origin main …or push an existing repository from the command line\ngit remote add origin https://github.com/szkm330/LrcToAss48.git git branch -M main git push -u origin main ","permalink":"https://www.tinclouds.com/posts/b1297e5f/","summary":"# 生成 ssh-keygen -t ed25519 -C “email@outlook.com” # 设置 git config --global user.name \u0026quot;user\u0026quot; git config --global user.email \u0026quot;email@outlook.com\u0026quot; git config --global init.defaultBranch main # 在文件夹下 git init # 初始化仓库 git add . # 添加该路径下所有文件 git commit -m \u0026quot;first commit\u0026quot; # 提交，m后是备注 git remote add origin https://github.com/szkm330/demo.git # 连接，仓库名origin git remote rm origin # 删除连接 git remote -v # 查看 git branch -M main # 换名 git branch -a # 查看 git push -u origin main # 上传 git pull origin main 官网摘录","title":"git与github"},{"content":"又研究了一下ws+tls，其实我也不知道有没有搞出来，也不知道到底效果如何，姑且搞一下\u0026hellip;\n基本安装 # 刷新源及更新软件 sudo apt-get update \u0026amp;\u0026amp; sudo apt-get upgrade # 脚本安装 bash \u0026lt;(curl -L -s https://install.direct/go.sh) # 编辑 V2Ray 配置 vim /etc/v2ray/config.json bbr wget –no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh chmod +x bbr.sh ./bbr.sh 域名操作 注册域名，A 记录指向自己\n生成证书，使用 acme.sh 脚本生成\ncurl https://get.acme.sh | sh # 安装到 ~/.acme.sh 目录下 source ~/.bashrc # 确保脚本所设置的命令别名生效 运行脚本所需工具\nsudo apt-get install socat 如果安装报错，那么可能是因为系统缺少 acme.sh 所需要的依赖项sudo apt-get -y install netcat 开始生成证书，注意改成自己的域名\nsudo ~/.acme.sh/acme.sh --issue -d mydomain.me --standalone -k ec-256 脚本每隔60天会自动更新，然后手动更新：\nsudo ~/.acme.sh/acme.sh --renew -d mydomain.com --force --ecc 将证书和密钥安装到 /etc/v2ray 中\nsudo ~/.acme.sh/acme.sh --installcert -d mydomain.me --fullchainpath /etc/v2ray/v2ray.crt --keypath /etc/v2ray/v2ray.key --ecc 升级 acme.sh 到最新版 :\nacme.sh --upgrade 可以开启自动升级:\nacme.sh --upgrade --auto-upgrade 关闭自动更新:\nacme.sh --upgrade --auto-upgrade 0 安装nginx ubuntu安装nginx\nsudo apt-get install nginx 开启nginx\nsudo /etc/init.d/nginx start 开机自启动\nsystemctl enable nginx 重载nginx\n/etc/init.d/nginx reload 检查 打开域名，看有没有初试welcome界面 测试证书是否正常https://www.ssllabs.com/ssltest/index.html\n修改配置 服务端\n{ \u0026quot;inbounds\u0026quot;: [{ \u0026quot;port\u0026quot;: 443, \u0026quot;protocol\u0026quot;: \u0026quot;vmess\u0026quot;, \u0026quot;settings\u0026quot;: { \u0026quot;clients\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;cxxxxxxxxaaxx-xxxx-xxxx4-e8e5xxxxxx6xxxx\u0026quot;, \u0026quot;level\u0026quot;: 1, \u0026quot;alterId\u0026quot;: 4 } ] }, \u0026quot;streamSettings\u0026quot;:{ \u0026quot;network\u0026quot;:\u0026quot;ws\u0026quot;, \u0026quot;security\u0026quot;:\u0026quot;tls\u0026quot;, \u0026quot;tlsSettings\u0026quot;:{ \u0026quot;certificates\u0026quot;:[ { \u0026quot;certificateFile\u0026quot;: \u0026quot;/etc/v2ray/v2ray.crt\u0026quot;, \u0026quot;keyFile\u0026quot;: \u0026quot;/etc/v2ray/v2ray.key\u0026quot; } ] } } }], \u0026quot;outbounds\u0026quot;: [{ \u0026quot;protocol\u0026quot;: \u0026quot;freedom\u0026quot;, \u0026quot;settings\u0026quot;: {} },{ \u0026quot;protocol\u0026quot;: \u0026quot;blackhole\u0026quot;, \u0026quot;settings\u0026quot;: {}, \u0026quot;tag\u0026quot;: \u0026quot;blocked\u0026quot; }], \u0026quot;routing\u0026quot;: { \u0026quot;rules\u0026quot;: [ { \u0026quot;type\u0026quot;: \u0026quot;field\u0026quot;, \u0026quot;ip\u0026quot;: [\u0026quot;geoip:private\u0026quot;], \u0026quot;outboundTag\u0026quot;: \u0026quot;blocked\u0026quot; } ] } } 客户端： 照着填，地址填域名\n改进 目前的nginx还只是一个welcome页面，待搞清楚后再弄吧。 ↓\n姑且在默认的HTML页面进行了修改 ↓\n自动更新似乎不好使，转为手动：\nsystemctl stop nginx # 先停止占用端口 acme.sh --renew-all ","permalink":"https://www.tinclouds.com/posts/a66a0c74/","summary":"又研究了一下ws+tls，其实我也不知道有没有搞出来，也不知道到底效果如何，姑且搞一下\u0026hellip;\n基本安装 # 刷新源及更新软件 sudo apt-get update \u0026amp;\u0026amp; sudo apt-get upgrade # 脚本安装 bash \u0026lt;(curl -L -s https://install.direct/go.sh) # 编辑 V2Ray 配置 vim /etc/v2ray/config.json bbr wget –no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh chmod +x bbr.sh ./bbr.sh 域名操作 注册域名，A 记录指向自己\n生成证书，使用 acme.sh 脚本生成\ncurl https://get.acme.sh | sh # 安装到 ~/.acme.sh 目录下 source ~/.bashrc # 确保脚本所设置的命令别名生效 运行脚本所需工具\nsudo apt-get install socat 如果安装报错，那么可能是因为系统缺少 acme.sh 所需要的依赖项sudo apt-get -y install netcat 开始生成证书，注意改成自己的域名\nsudo ~/.acme.sh/acme.sh --issue -d mydomain.me --standalone -k ec-256 脚本每隔60天会自动更新，然后手动更新：","title":"V2ray绚烂装订版"},{"content":"在考试周的地狱时间里，忙了一个晚上摸索搭建博客，通称摸鱼。\n但不管怎样，我这种性格的人必须要弄出点类似的东西，才会有动力学习下去吧，不然就会在沉默中慢慢消逝了。\n今天看了网上大佬的面试吐槽，突然有点慌，我一个傻子学了一年多好像什么也不会的样子，再这样下去我还不如当初去日语系呢。于是决定从现在开始慢慢学习下去，为了自己。\n","permalink":"https://www.tinclouds.com/posts/d1e1bc0a/","summary":"在考试周的地狱时间里，忙了一个晚上摸索搭建博客，通称摸鱼。\n但不管怎样，我这种性格的人必须要弄出点类似的东西，才会有动力学习下去吧，不然就会在沉默中慢慢消逝了。\n今天看了网上大佬的面试吐槽，突然有点慌，我一个傻子学了一年多好像什么也不会的样子，再这样下去我还不如当初去日语系呢。于是决定从现在开始慢慢学习下去，为了自己。","title":"第一篇"},{"content":" 一名偶像声优粉丝\n最近加推了紫月杏朱彩\n","permalink":"https://www.tinclouds.com/about/","summary":"about","title":"About"},{"content":"","permalink":"https://www.tinclouds.com/tools/","summary":"tools","title":"Tools"}]