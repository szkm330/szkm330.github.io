[{"content":"重度拖延症开始准备coding test了，也不知道到底需要多少。\n如果不报line，应该easy就行了吧？\n快慢指针 (环问题) 指fast一定能追上slow，通常设fast步长为2，slow为1\nclass Solution: def hasCycle(self, head: ListNode) -\u0026gt; bool: # 空链表或链表只有一个节点，无环 if not head or head.next == None: return False # 初始化快慢指针 fast = slow = head # 如果不存在环，肯定 fast 先指向 null # 细节：fast 每次走 2 步，所以要确定 fast 和 fast.next 不为空，不然会报执行出错。 while fast and fast.next: # 快指针移动 2 步，慢指针移动 1 步 fast = fast.next.next slow = slow.next # 快慢指针相遇，有环 if fast == slow: return True return False 两帧相遇在环的中途，（设：head到环起点为x，到环中途为y，绕回环起点为z）\n相遇时，slow走过x+y，fast则走了x+y+z+y，\n且根据fast = 2slow，可解得x = z\n因此，若此时再安排一个slow2从head出发，两个slow正好能在环起点相遇，便可以return出环起点的位置\nslow = fast = head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: slow2 = head while slow != slow2: slow = slow.next slow2 = slow2.next return slow return None 有序列表 大概就是有序列表中的删除问题，easy的话就是基本指向next，大家都变1个，注意边界就好。\n下面这个不止要删重复的，重复的要变0个\nwhile p2 and p2.next: if p2.val == p2.next.val: # 循环，将p2指向结束重复的坐标，p1连过去，以此删去所有重复的元素 while p2.next and p2.val == p2.next.val: p2 = p2.next p1.next = p2.next else: # 各自前进一格 p1 = p1.next p2 = p2.next 进位加法 class Solution(object): def addTwoNumbers(self, l1, l2): # 创建一个虚拟头节点 dummy = ListNode(0) head = dummy up = 0 # 表示进位 # 遍历两个链表 while l1 or l2 or up: val1 = l1.val if l1 else 0 val2 = l2.val if l2 else 0 res = val1 + val2 + up # 计算进位和当前位 up = res // 10 res = res % 10 # 创建新节点并移动指针 head.next = ListNode(res) head = head.next # 移动l1和l2指针 if l1: l1 = l1.next if l2: l2 = l2.next # 返回结果链表的头节点（跳过虚拟头节点） return dummy.next ","permalink":"https://szkm330.github.io/posts/%E9%9D%A2%E8%AF%95%E7%AE%97%E6%B3%95%E6%8A%B1%E4%BD%9B%E8%84%9A-linkedlist/","summary":"重度拖延症开始准备coding test了，也不知道到底需要多少。\n如果不报line，应该easy就行了吧？\n快慢指针 (环问题) 指fast一定能追上slow，通常设fast步长为2，slow为1\nclass Solution: def hasCycle(self, head: ListNode) -\u0026gt; bool: # 空链表或链表只有一个节点，无环 if not head or head.next == None: return False # 初始化快慢指针 fast = slow = head # 如果不存在环，肯定 fast 先指向 null # 细节：fast 每次走 2 步，所以要确定 fast 和 fast.next 不为空，不然会报执行出错。 while fast and fast.next: # 快指针移动 2 步，慢指针移动 1 步 fast = fast.next.next slow = slow.next # 快慢指针相遇，有环 if fast == slow: return True return False 两帧相遇在环的中途，（设：head到环起点为x，到环中途为y，绕回环起点为z）","title":"面试算法抱佛脚-LinkedList"},{"content":"建库，设key 一个公共放网页，username.github.io 一个私有放全部，blog Setting - Developer setting - Personal access tokens， 创建一个 Token，选repo和workflow权限（只能看一次，记得复制） 私有库的 Settings - Secrets - Actions 添加PERSONAL_TOKEN 设置 创建blog/.github/workflows/build.yml\nname: github pages on: push: branches: - main # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: personal_token: ${{ secrets.PERSONAL_TOKEN }} external_repository: szkm330/szkm330.github.io publish_branch: main publish_dir: ./public 日常使用 # 第一次安装 git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod # 重新clone的时候 git clone git submodule update --init --recursive # 初始化更新theme子模块 git submodule update --remote --merge # 如果主题有更新 ----- # 一般使用 hugo new posts/a.md git add . git commit -m \u0026#34;\u0026#34; git push ","permalink":"https://szkm330.github.io/posts/%E5%88%A9%E7%94%A8git-actions%E8%BF%9B%E8%A1%8C%E5%8D%9A%E5%AE%A2%E4%B8%8A%E4%BC%A0/","summary":"建库，设key 一个公共放网页，username.github.io 一个私有放全部，blog Setting - Developer setting - Personal access tokens， 创建一个 Token，选repo和workflow权限（只能看一次，记得复制） 私有库的 Settings - Secrets - Actions 添加PERSONAL_TOKEN 设置 创建blog/.github/workflows/build.yml\nname: github pages on: push: branches: - main # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.","title":"利用git actions进行博客上传"},{"content":"# 生成 ssh-keygen -t ed25519 -C “email@outlook.com” # 设置 git config --global user.name \u0026quot;user\u0026quot; git config --global user.email \u0026quot;email@outlook.com\u0026quot; git config --global init.defaultBranch main # 在文件夹下 git init # 初始化仓库 git add . # 添加该路径下所有文件 git commit -m \u0026quot;first commit\u0026quot; # 提交，m后是备注 git remote add origin https://github.com/szkm330/demo.git # 连接，仓库名origin git remote rm origin # 删除连接 git remote -v # 查看 git branch -M main # 换名 git branch -a # 查看 git push -u origin main # 上传 git pull origin main 官网摘录\n…or create a new repository on the command line\necho \u0026#34;# LrcToAss48\u0026#34; \u0026gt;\u0026gt; README.md git init git add README.md git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin https://github.com/szkm330/LrcToAss48.git git push -u origin main …or push an existing repository from the command line\ngit remote add origin https://github.com/szkm330/LrcToAss48.git git branch -M main git push -u origin main ","permalink":"https://szkm330.github.io/posts/git%E4%B8%8Egithub/","summary":"# 生成 ssh-keygen -t ed25519 -C “email@outlook.com” # 设置 git config --global user.name \u0026quot;user\u0026quot; git config --global user.email \u0026quot;email@outlook.com\u0026quot; git config --global init.defaultBranch main # 在文件夹下 git init # 初始化仓库 git add . # 添加该路径下所有文件 git commit -m \u0026quot;first commit\u0026quot; # 提交，m后是备注 git remote add origin https://github.com/szkm330/demo.git # 连接，仓库名origin git remote rm origin # 删除连接 git remote -v # 查看 git branch -M main # 换名 git branch -a # 查看 git push -u origin main # 上传 git pull origin main 官网摘录","title":"git与github"}]